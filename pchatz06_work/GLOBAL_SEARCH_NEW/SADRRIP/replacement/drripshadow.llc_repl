#include "cache.h"

#define maxRRPV 3
#define NUM_POLICY 2
#define SDM_SIZE 32
#define TOTAL_SDM_SETS NUM_CPUS*NUM_POLICY*SDM_SIZE
#define BIP_MAX 32
//#define PSEL_WIDTH 10*NUM_CPUS
#define PSEL_WIDTH 15
#define PSEL_MAX ((1<<PSEL_WIDTH)-1)
#define PSEL_THRS PSEL_MAX/2

uint32_t rrpv[LLC_SET][LLC_WAY],
        shadowrrpv[LLC_SET][LLC_WAY],
        shadowrrpvBIP[LLC_SET][LLC_WAY],
        bip_counter = 0,
        bip_counterShadow = 0,
        PSEL[NUM_CPUS];
unsigned rand_sets[TOTAL_SDM_SETS];
uint64_t shadowtag[LLC_SET][LLC_WAY];
uint64_t shadowtagBIP[LLC_SET][LLC_WAY];

uint64_t shadowhits = 0;
uint64_t shadowmisses = 0;
uint64_t shadowhitsBIP = 0;
uint64_t shadowmissesBIP = 0;

int use_2_shadow = 1;
int tempPSEL = 0;

void CACHE::llc_initialize_replacement()
{
    cout << "Initialize DRRIP state" << endl;

    for(int i=0; i<LLC_SET; i++) {
        for(int j=0; j<LLC_WAY; j++)
        {
            rrpv[i][j] = maxRRPV;
            shadowrrpv[i][j] = maxRRPV;
            shadowrrpvBIP[i][j] = maxRRPV;
            shadowtag[i][j] = 0;
            shadowtagBIP[i][j] = 0;
        }
    }

    // randomly selected sampler sets
    srand(time(NULL));
    unsigned long rand_seed = 1;
    unsigned long max_rand = 1048576;
    uint32_t my_set = LLC_SET;
    int do_again = 0;
    for (int i=0; i<TOTAL_SDM_SETS; i++) {
        do {
            do_again = 0;
            rand_seed = rand_seed * 1103515245 + 12345;
            rand_sets[i] = ((unsigned) ((rand_seed/65536) % max_rand)) % my_set;
            printf("Assign rand_sets[%d]: %u  LLC: %u\n", i, rand_sets[i], my_set);
            for (int j=0; j<i; j++) {
                if (rand_sets[i] == rand_sets[j]) {
                    do_again = 1;
                    break;
                }
            }
        } while (do_again);
        printf("rand_sets[%d]: %d\n", i, rand_sets[i]);
    }

    for (int i=0; i<NUM_CPUS; i++)
    {
        PSEL[i] = PSEL_THRS;
    }
}

int is_it_leader(uint32_t cpu, uint32_t set)
{
    uint32_t start = cpu * NUM_POLICY * SDM_SIZE,
             end = start + NUM_POLICY * SDM_SIZE;

    for (uint32_t i=start; i<end; i++)
        if (rand_sets[i] == set)
            return ((i - start) / SDM_SIZE);

    return -1;
}

int checkHit (uint64_t shadowdir[][LLC_WAY], uint64_t blockAddress, uint32_t set)
{
    for(int j=0; j<LLC_WAY; j++)
    {
        if (shadowdir[set][j] == blockAddress)
        {
            return j;
        }
    }
    return LLC_WAY;
}

void updateshadow(uint32_t cpu, uint32_t set, uint32_t way)
{
    if (use_2_shadow) // If 2 full shadow tags this defaults to SRRIP
    {
        tempPSEL++;
        shadowrrpv[set][way] = maxRRPV-1;
        return;        
    }
    // cache miss
    int leader = is_it_leader(cpu, set);
    
    if (leader == -1) { // follower sets
        if (PSEL[cpu] > PSEL_THRS) { // follow BIP
            shadowrrpv[set][way] = maxRRPV;
            
            bip_counterShadow++;
            if (bip_counterShadow == BIP_MAX)
                bip_counterShadow = 0;
            if (bip_counterShadow == 0)
                shadowrrpv[set][way] = maxRRPV-1;
        } else // follow SRRIP
            shadowrrpv[set][way] = maxRRPV-1;
        
    } else if (leader == 0) { // leader 0: BIP
        tempPSEL--;
        shadowrrpv[set][way] = maxRRPV;
        
        bip_counterShadow++;
        if (bip_counterShadow == BIP_MAX) bip_counterShadow = 0;
        if (bip_counterShadow == 0) shadowrrpv[set][way] = maxRRPV-1;
        
    } else if (leader == 1) { // leader 1: SRRIP 
        tempPSEL++;
        shadowrrpv[set][way] = maxRRPV-1;
        
    } else // WE SHOULD NOT REACH HERE
        assert(0);
}

void updateshadowBIP(uint32_t cpu, uint32_t set, uint32_t way)
{
    tempPSEL--;
    shadowrrpvBIP[set][way] = maxRRPV;
    
    bip_counterShadow++;
    if (bip_counterShadow == BIP_MAX) bip_counterShadow = 0;
    if (bip_counterShadow == 0) shadowrrpv[set][way] = maxRRPV-1;
}

uint32_t llc_find_victimshadow(uint32_t shadowDir[][LLC_WAY], uint32_t set);

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit, uint64_t current_core_cycle, int fill_level, uint8_t valid)
{
    uint64_t blockAddress = (full_addr >> LOG2_BLOCK_SIZE);
    int leader = is_it_leader(cpu, set);
    int shadowWay = checkHit(shadowtag,blockAddress, set);
    int shadowHit = 0;
    int PSELbefore = PSEL[cpu];
    int normalHit = 0;
    
    if (hit)
    {
        normalHit = 1;
    }
    
    // Cache miss on shadow dir. insert block
    if (shadowWay == LLC_WAY)
    {
        int victimWay = llc_find_victimshadow(shadowrrpv, set);
        shadowtag[set][victimWay] = blockAddress;
        shadowWay = victimWay;
        // do not update replacement state for writebacks
        if (type == WRITEBACK) {
            shadowrrpv[set][shadowWay] = maxRRPV-1;
        }
        else
        {
            updateshadow(cpu, set, shadowWay);
        }
        shadowmisses++;
    }
    else
    {
        shadowHit = 1;
        // do not update replacement state for writebacks
        if (type == WRITEBACK) {
            shadowrrpv[set][shadowWay] = maxRRPV-1;
        }
        else
        {
            shadowrrpv[set][shadowWay] = 0; // for cache hit, DRRIP always promotes a cache line to the MRU position
        }
        shadowhits++;
    }
    
    cout << "BA: " << blockAddress << " HIT: " << normalHit << " WB: " << (type == WRITEBACK);

    if (use_2_shadow) // If 2 full shadow tags repeat for separate shadowtagBIP
    {
        int shadowWayBIP = checkHit(shadowtagBIP,blockAddress, set);
        int shadowHitBIP = 0;
        int PSELbeforeBIP = PSEL[cpu];
        // Cache miss on shadow dir. insert block
        if (shadowWayBIP == LLC_WAY)
        {
            int victimWayBIP = llc_find_victimshadow(shadowrrpvBIP, set);
            shadowtagBIP[set][victimWayBIP] = blockAddress;
            shadowWayBIP = victimWayBIP;
            // do not update replacement state for writebacks
            if (type == WRITEBACK) {
                shadowrrpvBIP[set][shadowWayBIP] = maxRRPV-1;
            }
            else
            {
                updateshadowBIP(cpu, set, shadowWayBIP);
            }
            shadowmissesBIP++;
        }
        else
        {
            shadowHitBIP = 1;
            // do not update replacement state for writebacks
            if (type == WRITEBACK) {
                shadowrrpvBIP[set][shadowWayBIP] = maxRRPV-1;
            }
            else
            {
                shadowrrpvBIP[set][shadowWayBIP] = 0; // for cache hit, DRRIP always promotes a cache line to the MRU position
            }
            shadowhitsBIP++;
        }
        
        if (tempPSEL != 0)
        {
            if (tempPSEL > 0)
            {
                if (PSEL[cpu] < PSEL_MAX) PSEL[cpu]++;                
            }
            else
            {
                if (PSEL[cpu] > 0) PSEL[cpu]--;
            }
            tempPSEL = 0;
        }
        cout << " PSELBEFORESRRIP: " << PSELbefore << " PSELBEFOREBIP: " <<  PSELbeforeBIP << " UPSEL: " << PSEL[cpu] << " SHITSRRIP: " << shadowHit << " SHITBIP: " << shadowHitBIP << endl;
    }
    else
    {
        if (tempPSEL != 0)
        {
            if (tempPSEL > 0)
            {
                if (PSEL[cpu] < PSEL_MAX) PSEL[cpu]++;                
            }
            else
            {
                if (PSEL[cpu] > 0) PSEL[cpu]--;
            }
            tempPSEL = 0;
        }
        cout << " BT: " << leader << " PSEL: " << PSELbefore << " UPSEL: " << PSEL[cpu] << " SHIT: " << shadowHit << endl;
    }
    
    // do not update replacement state for writebacks
    if (type == WRITEBACK) {
        rrpv[set][way] = maxRRPV-1;
        return;
    }

	// cache hit
	if (hit) { 
		rrpv[set][way] = 0; // for cache hit, DRRIP always promotes a cache line to the MRU position
		return;
	}

    if (PSEL[cpu] > PSEL_THRS) { // follow BIP
        rrpv[set][way] = maxRRPV;

        bip_counter++;
        if (bip_counter == BIP_MAX)
            bip_counter = 0;
        if (bip_counter == 0)
            rrpv[set][way] = maxRRPV-1;
    } else // follow SRRIP
        rrpv[set][way] = maxRRPV-1;
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type, uint64_t current_core_cycle, uint64_t instr_unique_id)
{
    // look for the maxRRPV line
    while (1)
    {
        for (int i=0; i<LLC_WAY; i++)
            if (rrpv[set][i] == maxRRPV)
                return i;

        for (int i=0; i<LLC_WAY; i++)
            rrpv[set][i]++;
    }

    // WE SHOULD NOT REACH HERE
    assert(0);
    return 0;
}

// find replacement victim
uint32_t llc_find_victimshadow(uint32_t shadowDir[][LLC_WAY], uint32_t set)
{
    // look for the maxRRPV line
    while (1)
    {
        for (int i=0; i<LLC_WAY; i++)
            if (shadowDir[set][i] == maxRRPV)
                return i;
            
            for (int i=0; i<LLC_WAY; i++)
                shadowDir[set][i]++;
    }
    
    // WE SHOULD NOT REACH HERE
    assert(0);
    return 0;
}

// use this function to print out your own stats at the end of simulation
void CACHE::llc_replacement_final_stats()
{
    cout << "Shadow Misses: " << shadowmisses << endl;
    cout << "Shadow Hits: " << shadowhits << endl;
    cout << "ShadowBIP Misses: " << shadowmissesBIP << endl;
    cout << "ShadowBIP Hits: " << shadowhitsBIP << endl;
}
