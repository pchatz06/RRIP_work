#include <unordered_map>
#include <string>
#include <vector>
#include <algorithm>
#include <sstream>
#include <iterator>
#include "cache.h"

#define maxRRPV 3
uint32_t rrpv[LLC_SET][LLC_WAY];
uint32_t rrpvhits[maxRRPV+1];
uint32_t rrpvrepl[maxRRPV+1];
uint32_t rrpvcount[maxRRPV+1];
std::unordered_map<std::string, unsigned int> RRPVDistr;

// initialize replacement state
void CACHE::llc_initialize_replacement()
{
    cout << "Initialize SRRIP state" << endl;

    for (int i=0; i<LLC_SET; i++) {
        for (int j=0; j<LLC_WAY; j++) {
            rrpv[i][j] = maxRRPV;
        }
    }

    for (int i=0; i<(maxRRPV+1); i++) {
        rrpvhits[i] = 0;
        rrpvrepl[i] = 0;
    }    
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type, uint64_t current_core_cycle)
{
    uint32_t rrpvcount[maxRRPV+1];

    for (int i=0; i<=maxRRPV; i++)
    {
        rrpvcount[i] = 0;
    }

    for (int i=0; i<LLC_WAY; i++)
    {
        rrpvcount[rrpv[set][i]]++;
    }

    std::vector<uint64_t> myDistrVector (rrpvcount, rrpvcount+maxRRPV+1);    
    std::ostringstream distrStringStream;

    if (!myDistrVector.empty())
    {
        // Convert all but the last element to avoid a trailing ","
        std::copy(myDistrVector.begin(), myDistrVector.end()-1,
            std::ostream_iterator<uint64_t>(distrStringStream, "-"));

        // Now add the last element with no delimiter
        distrStringStream << myDistrVector.back();
    }
    
    std::string distrString = distrStringStream.str();
    
    auto search = RRPVDistr.find(distrString);
    if (search != RRPVDistr.end()) 
    {
        RRPVDistr[distrString]++;
    } 
    else 
    {
        RRPVDistr.insert({ distrString, 1 });
    }
    
    // look for the maxRRPV line
    int countIncreases = 0;
    while (1)
    {
        for (int i=0; i<LLC_WAY; i++)
        {
            if (rrpv[set][i] == maxRRPV)
            {
                rrpvrepl[maxRRPV-countIncreases]++;
                return i;
            }
        }
        
        // Count how many times we increased
        countIncreases++;
        
        for (int i=0; i<LLC_WAY; i++)
            rrpv[set][i]++;
    }

    // WE SHOULD NOT REACH HERE
    assert(0);
    return 0;
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit, uint64_t current_core_cycle, int fill_level, uint8_t valid)
{
    string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS";

    if ((type == WRITEBACK) && ip)
        assert(0);

    // uncomment this line to see the LLC accesses
    // cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " << setw(5) << set << " way: " << setw(2) << way;
    // cout << hex << " paddr: " << setw(12) << paddr << " ip: " << setw(8) << ip << " victim_addr: " << victim_addr << dec << endl;
    
    if (hit)
    {
        rrpvhits[rrpv[set][way]]++;
        rrpv[set][way] = 0;
    }
    else
        rrpv[set][way] = maxRRPV-1;
}

// use this function to print out your own stats at the end of simulation
void CACHE::llc_replacement_final_stats()
{
    for (int i=0; i<(maxRRPV+1); i++) 
    {
        cout << "SRRIP Region " << i << ": Hits " << rrpvhits[i] << " Replacements " << rrpvrepl[i] << endl;
    }
    
    for (std::pair<std::string, unsigned int> element : RRPVDistr)
    {
		std::cout << "SRRIP Distribution: "<< element.first << " :: " << element.second << std::endl;
    }
}
