#include <unordered_map>
#include <string>
#include <vector>
#include <algorithm>
#include <sstream>
#include <iterator>
#include "cache.h"

#define maxRRPV 3
#define predictorSize 16384
#define PID 0
uint32_t rrpv[LLC_SET][LLC_WAY];
uint32_t rrpvhits[(maxRRPV+1)*2];
uint32_t rrpvrepl[(maxRRPV+1)*2];
uint32_t rrpvcount[maxRRPV+1];
uint32_t reuse[LLC_SET][LLC_WAY];
std::unordered_map<std::string, unsigned int> RRPVDistr;
uint32_t predictorArray[predictorSize];
int predictorIndexSize;

//Adaptive SRRIP
#define resetCountTotal 128
#define resetCountPerSet 2
#define replacePerSet 0
#define usePredictor 0
#define BIP_MAX 0 // DRRIP default is 32. Set 0 for SRRIP

uint32_t rrpvcounters[maxRRPV+1];
uint32_t rrpvcountersPerSet[LLC_SET][maxRRPV+1];
uint32_t insRRPV;
uint32_t insRRPVPerSet[LLC_SET];
uint32_t replaceCount;
uint32_t replaceCountPerSet[LLC_SET];
uint32_t rrpvperiods[8];
uint32_t bip_counter;

float previous_value = 0;
float previous_error = 0;
float Integral = 0;

int PID_resultV1(int setpoint)
{
    float dt = 0.15;
    float maxInc = 1;
    float minInc = -1;
    float Kp = 0.01;
    float Kd = 0.02;
    float Ki = 0.5;
    
    int maxVal = 1;
    int minVal = 0;
    
    float error = setpoint - previous_value;
    float Pout = error * Kp;
    Integral += error * dt;
    float Iout = Integral * Ki;
    float derivative = (error - previous_error)/dt;
    float Dout = derivative * Kd;
    float increment = Pout + Iout + Dout;
    
    if (increment > maxInc)
    {
        increment = maxInc;
    }
    else if (increment < minInc)
    {
        increment = minInc;
    }

    previous_value += increment;
    
    if (previous_value > maxVal)
    {
        previous_value = maxVal;
    }
    else if (previous_value < minVal)
    {
        previous_value = minVal;
    }
    
    return roundf(previous_value);
}

int PID_result(int setpoint)
{
    float dt = 0.1;
    float maxInc = 1;
    float minInc = -1;
    float Kp = 0.1;
    float Kd = 0.0;
    float Ki = 0.3;
    
    int maxVal = 1;
    int minVal = -1;
    
    float error = setpoint - previous_value;
    float Pout = error * Kp;
    Integral += error * dt;
    float Iout = Integral * Ki;
    float derivative = (error - previous_error)/dt;
    float Dout = derivative * Kd;
    float increment = Pout + Iout + Dout;
    
    if (increment > maxInc)
    {
        increment = maxInc;
    }
    else if (increment < minInc)
    {
        increment = minInc;
    }
    
    previous_value += increment;
    
    if (previous_value > maxVal)
    {
        previous_value = maxVal;
    }
    else if (previous_value < minVal)
    {
        previous_value = minVal;
    }
    
    if (previous_value > 0)
    {
        return 1;
        
    }
    else
    {
        return 0;
    }
}


// initialize replacement state
void CACHE::llc_initialize_replacement()
{
    cout << "Initialize SRRIP state" << endl;
    
    bip_counter = 0;
    
    for (int i = 0; i < predictorSize; i++) 
    {
        predictorArray[i] = 0;
    }
    
    predictorIndexSize = log2(predictorSize);
    
    for (int i=0; i<LLC_SET; i++) 
    {
        for (int j=0; j<LLC_WAY; j++) 
        {
            rrpv[i][j] = maxRRPV;
            reuse[i][j] = 0;
        }
    }
    
    replaceCount = 0;
    // Initially we insert at 2 as the original SRRIP
    insRRPV = 2;
    
    for (int i=0; i<((maxRRPV+1)*2); i++)
    {
        rrpvhits[i] = 0;
        rrpvrepl[i] = 0;
    }    
    
    for (int i=0; i<(maxRRPV+1); i++)
    {
        rrpvcounters[i] = 0;
    }    
    
    for (int i=0; i<LLC_SET; i++) 
    {
        replaceCountPerSet[i] = 0;
        insRRPVPerSet[i] = 2;
        for (int j=0; j<(maxRRPV+1); j++)
        {
            rrpvcountersPerSet[i][j] = 0;
        }
    }
    
    rrpvperiods[0] = 0;
    rrpvperiods[1] = 0;
    rrpvperiods[2] = 0;
    rrpvperiods[3] = 0;
    rrpvperiods[4] = 0;
    rrpvperiods[5] = 0;
    rrpvperiods[6] = 0;
    rrpvperiods[7] = 0;
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type, uint64_t current_core_cycle, uint64_t instr_unique_id)
{
    
    // fill invalid line first
    if (0)
    {
        uint32_t way = 0;
        for (way=0; way<NUM_WAY; way++) {
            if (block[set][way].valid == false) {
                
                DP ( if (warmup_complete[cpu]) {
                    cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " invalid set: " << set << " way: " << way;
                    cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
                    cout << dec << " lru: " << block[set][way].lru << endl; });
                
                break;
            }
        }
        
        if (way != NUM_WAY)
        {
            return way;
        }
    }
    
    uint32_t rrpvcount[maxRRPV+1];
    uint32_t rrpvreuse[2];
    
    for (int i=0; i<=maxRRPV; i++)
    {
        rrpvcount[i] = 0;
    }
    
    for (int i=0; i<2; i++)
    {
        rrpvreuse[i] = 0;
    }
    
    for (int i=0; i<LLC_WAY; i++)
    {
        rrpvcount[rrpv[set][i]]++;
        rrpvreuse[reuse[set][i]]++;
    }
    
    std::vector<uint64_t> myDistrVector (rrpvcount, rrpvcount+maxRRPV+1);
    std::ostringstream distrStringStream;
    
    if (!myDistrVector.empty())
    {
        // Convert all but the last element to avoid a trailing ","
        std::copy(myDistrVector.begin(), myDistrVector.end()-1,
                  std::ostream_iterator<uint64_t>(distrStringStream, "-"));
        
        // Now add the last element with no delimiter
        distrStringStream << myDistrVector.back();
    }
    
    distrStringStream << "-";
    std::vector<uint64_t> myDistrVector2 (rrpvreuse, rrpvreuse+2);
    
    if (!myDistrVector2.empty())
    {
        // Convert all but the last element to avoid a trailing ","
        std::copy(myDistrVector2.begin(), myDistrVector2.end()-1,
                  std::ostream_iterator<uint64_t>(distrStringStream, "-"));
        
        // Now add the last element with no delimiter
        distrStringStream << myDistrVector2.back();
    }
    
    std::string distrString = distrStringStream.str();
    
    auto search = RRPVDistr.find(distrString);
    if (search != RRPVDistr.end()) 
    {
        RRPVDistr[distrString]++;
    } 
    else 
    {
        RRPVDistr.insert({ distrString, 1 });
    }
    
    // look for the maxRRPV line
    int countIncreases = 0;
    int mode = 191; // 0 Adapt; 1 Advance; 2 Adapt + Reset to 2; 3 Adapt2; 4 Adapt3; 5 Always 0; 6 Always 1; 7 Always 2; 8 Always 3;
    int countresetflag = 1; // 1 reset counters; 0 no reset
    int reuseDisable = 1;
    int resetCount = resetCountTotal;
    while (1)
    {
        uint32_t savedReplacement = LLC_WAY+1;
        uint32_t prevInsRRPV = insRRPV;
        for (int i=0; i<LLC_WAY; i++)
        {
            if (rrpv[set][i] == maxRRPV)
            {
                if (savedReplacement == LLC_WAY+1)
                {
                    savedReplacement = i;
                }
                
                if (replacePerSet)
                {
                    replaceCountPerSet[set]++;
                    replaceCount = replaceCountPerSet[set];
                    resetCount = resetCountPerSet;
                }
                else
                {
                    replaceCount++;
                    resetCount = resetCountTotal;
                }
                
                
                if (replaceCount >= resetCount)
                {
                    unsigned int hitSum = 0;
                    replaceCount = 0;
                    replaceCountPerSet[set] = 0;
                    
                    if (replacePerSet)
                    {
                        for (int i=0; i<(maxRRPV+1); i++) 
                        {
                            rrpvcounters[i] = rrpvcountersPerSet[set][i];
                        }
                    }
                    
                    for (int i=0; i<(maxRRPV+1); i++) 
                    {
                        hitSum += rrpvcounters[i];
                    }
                    
                    
                    if (mode == 0)
                    {
                        if((rrpvcounters[0]/4) <= rrpvcounters[1])
                        {
                            insRRPV = maxRRPV;
                            rrpvperiods[1]++;
                        }
                        else
                        {
                            if ((insRRPV == maxRRPV-1) && (rrpvcounters[maxRRPV-1] == 0))
                            {
                                insRRPV = maxRRPV;
                                rrpvperiods[1]++;
                            }
                            else if(rrpvcounters[maxRRPV] != 0)
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                    }
                    else if (mode == 1)
                    {
                        if((rrpvcounters[0]/4) <= rrpvcounters[1])
                        {
                            insRRPV = maxRRPV;
                            rrpvperiods[1]++;
                        }
                        else
                        {
                            insRRPV = maxRRPV-1;
                            rrpvperiods[0]++;
                        }
                    }
                    else if (mode == 2)
                    {
                        if((rrpvcounters[0]/4) <= rrpvcounters[1])
                        {
                            insRRPV = maxRRPV;
                            rrpvperiods[1]++;
                        }
                        else if((rrpvcounters[0]/4) > rrpvcounters[1])
                        {
                            insRRPV = maxRRPV-1;
                            rrpvperiods[0]++;
                        }
                    }                    
                    else if (mode == 3)
                    {
                        if ((insRRPV == maxRRPV) && (rrpvcounters[maxRRPV] > (rrpvcounters[0]/4)))
                        {
                            insRRPV = maxRRPV-1;
                            rrpvperiods[0]++;
                        }
                        else if ((insRRPV == (maxRRPV-1)) && ((rrpvcounters[0]/4) <= rrpvcounters[maxRRPV]))
                        {
                            insRRPV = maxRRPV;
                            rrpvperiods[1]++;
                        }
                    }
                    else if (mode == 4)
                    {
                        if ((rrpvcounters[0]/4) <= rrpvcounters[1])
                        {
                            if ((insRRPV == maxRRPV) && (rrpvcounters[maxRRPV] != 0))
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                            else
                            {
                                insRRPV = maxRRPV;
                                rrpvperiods[1]++;
                            }
                            
                        }
                        else
                        {
                            if ((insRRPV == maxRRPV) && (rrpvcounters[maxRRPV] == 0))
                            {
                                insRRPV = maxRRPV;
                                rrpvperiods[1]++;
                            }
                            else if ((insRRPV == (maxRRPV-1)) && (rrpvcounters[maxRRPV-1] == 0))
                            {
                                insRRPV = maxRRPV;
                                rrpvperiods[1]++;
                            }
                            else
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                            
                        }
                    }
                    else if (0)
                    {
                        if (mode == 101)
                        {
                            if (rrpvcounters[insRRPV] == 0)
                            {
                                insRRPV = maxRRPV;
                                rrpvperiods[1]++;
                            }
                            else
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 102)
                        {
                            if ((rrpvcounters[0]/4) <= rrpvcounters[1])
                            {
                                insRRPV = maxRRPV;
                                rrpvperiods[1]++;
                            }
                            else
                            {
                                if (rrpvcounters[insRRPV] == 0)
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                }
                                else
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                }
                            }
                        }
                        else if (mode == 103)
                        {
                            if ((rrpvcounters[0]/16) <= rrpvcounters[1])
                            {
                                insRRPV = maxRRPV;
                                rrpvperiods[1]++;
                            }
                            else
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 104)
                        {
                            if ((rrpvcounters[0]/4) <= rrpvcounters[insRRPV])
                            {
                                insRRPV = maxRRPV;
                                rrpvperiods[1]++;
                            }
                            else
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 105)
                        {
                            if ((rrpvcounters[0]/4) <= rrpvcounters[1])
                            {
                                insRRPV = maxRRPV;
                                rrpvperiods[1]++;
                            }
                            else if ((rrpvcounters[0]/4) >= rrpvcounters[insRRPV])
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 106)
                        {
                            if ((rrpvcounters[0]/16) <= rrpvcounters[insRRPV])
                            {
                                insRRPV = maxRRPV;
                                rrpvperiods[1]++;
                            }
                            else
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 107)
                        {
                            if ((rrpvcounters[0]/16) <= rrpvcounters[1])
                            {
                                insRRPV = maxRRPV;
                                rrpvperiods[1]++;
                            }
                            else if ((rrpvcounters[0]/16) >= rrpvcounters[insRRPV])
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 108)
                        {
                            if ((rrpvcounters[0]/8) <= rrpvcounters[insRRPV])
                            {
                                insRRPV = maxRRPV;
                                rrpvperiods[1]++;
                            }
                            else
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 109)
                        {
                            if ((rrpvcounters[0]/8) <= rrpvcounters[1])
                            {
                                insRRPV = maxRRPV;
                                rrpvperiods[1]++;
                            }
                            else if ((rrpvcounters[0]/8) >= rrpvcounters[insRRPV])
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 110)
                        {
                            if ((rrpvcounters[0]/2) <= rrpvcounters[insRRPV])
                            {
                                insRRPV = maxRRPV;
                                rrpvperiods[1]++;
                            }
                            else
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 111)
                        {
                            if ((rrpvcounters[0]/2) <= rrpvcounters[1])
                            {
                                insRRPV = maxRRPV;
                                rrpvperiods[1]++;
                            }
                            else if ((rrpvcounters[0]/2) >= rrpvcounters[insRRPV])
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 112)
                        {
                            if (insRRPV == maxRRPV)
                            {
                                if ((rrpvcounters[0]/4) <= rrpvcounters[1])
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                }
                                else if (rrpvcounters[insRRPV] != 0)
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                }
                            }
                            else
                            {
                                if (rrpvcounters[insRRPV] == 0)
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                }
                                else if ((rrpvcounters[0]/4) >= rrpvcounters[insRRPV])
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                }
                            }
                        }
                        else if (mode == 113)
                        {
                            if (insRRPV == maxRRPV)
                            {
                                if ((rrpvcounters[0]/4) <= rrpvcounters[1])
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                }
                                else if (rrpvcounters[insRRPV] != 0)
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                }
                            }
                            else
                            {
                                if (((rrpvcounters[0]/4) <= rrpvcounters[1]) || (rrpvcounters[insRRPV] == 0))
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                }
                                else if ((rrpvcounters[0]/4) >= rrpvcounters[insRRPV])
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                }
                            }
                        }
                        else if (mode == 114)
                        {
                            if (insRRPV == maxRRPV)
                            {
                                if ((rrpvcounters[0]/4) <= rrpvcounters[1])
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                }
                                else if (rrpvcounters[insRRPV] != 0)
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                }
                            }
                            else
                            {
                                if (((rrpvcounters[0]/4) <= rrpvcounters[1]) || ((rrpvcounters[insRRPV] == 0) && (rrpvcounters[insRRPV+1] == 0)))
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                }
                                else if ((rrpvcounters[0]/4) >= rrpvcounters[insRRPV])
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                }
                            }
                        }
                        else if (mode == 115)
                        {
                            if ((rrpvcounters[0]/4) <= rrpvcounters[1])
                            {
                                insRRPV = maxRRPV;
                                rrpvperiods[1]++;
                            }
                            else if ((rrpvcounters[0]/2) >= rrpvcounters[insRRPV])
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 116)
                        {
                            if (insRRPV == maxRRPV)
                            {
                                if ((rrpvcounters[0]/4) <= rrpvcounters[1])
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                }
                                else if (rrpvcounters[insRRPV] != 0)
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                }
                                else
                                {
                                    rrpvperiods[1]++;
                                }
                            }
                            else
                            {
                                if ((rrpvcounters[0]/4) <= rrpvcounters[1])
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                }
                                else if ((rrpvcounters[0]/4) >= rrpvcounters[insRRPV])
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                }
                                else
                                {
                                    rrpvperiods[0]++;
                                }
                            }
                        }
                        else if (mode == 117)
                        {
                            if (insRRPV == maxRRPV)
                            {
                                if ((rrpvcounters[0]/4) <= rrpvcounters[1])
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                }
                                else if (rrpvcounters[insRRPV] != 0)
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                }
                                else
                                {
                                    rrpvperiods[1]++;
                                }
                            }
                            else
                            {
                                if ((rrpvcounters[0]/4) <= rrpvcounters[1])
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                }
                                else if ((rrpvcounters[0]/2) >= rrpvcounters[insRRPV])
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                }
                                else
                                {
                                    rrpvperiods[0]++;
                                }
                            }
                        }
                        else if (mode == 118)
                        {
                            if (insRRPV == maxRRPV)
                            {
                                if ((rrpvcounters[0]/2) <= rrpvcounters[1])
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                }
                                else if (rrpvcounters[insRRPV] != 0)
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                }
                                else
                                {
                                    rrpvperiods[1]++;
                                }
                            }
                            else
                            {
                                if ((rrpvcounters[0]/2) <= rrpvcounters[1])
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                }
                                else if ((rrpvcounters[0]/2) >= rrpvcounters[insRRPV])
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                }
                                else
                                {
                                    rrpvperiods[0]++;
                                }
                            }
                        }
                        else if (mode == 120)
                        {
                            if ((rrpvcounters[0]/2) <= rrpvcounters[1])
                            {
                                insRRPV = maxRRPV;
                                rrpvperiods[1]++;
                            }
                            else if ((rrpvcounters[0]/8) >= rrpvcounters[insRRPV])
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 121)
                        {
                            if ((rrpvcounters[0]/2) <= rrpvcounters[1])
                            {
                                insRRPV = maxRRPV;
                                rrpvperiods[1]++;
                            }
                            else if ((rrpvcounters[0]/4) <= rrpvcounters[maxRRPV])
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 122)
                        {
                            if ((rrpvcounters[maxRRPV]) >= ((rrpvcounters[maxRRPV-1]+rrpvcounters[0]+rrpvcounters[1])/8))
                            {
                                insRRPV = maxRRPV;
                                rrpvperiods[1]++;
                            }
                            else if (rrpvcounters[maxRRPV] > (rrpvcounters[0]/4))
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 123)
                        {
                            if (insRRPV == maxRRPV)
                            {
                                if ((rrpvcounters[0]/4) >= rrpvcounters[insRRPV])
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                }
                            }
                            else
                            {
                                if ((rrpvcounters[0]/2) <= rrpvcounters[1])
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                }
                                else if ((rrpvcounters[insRRPV]+rrpvcounters[insRRPV+1]) == 0)
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                }
                            }
                        }
                        else if (mode == 124)
                        {
                            if ((rrpvcounters[0]/1) <= rrpvcounters[1])
                            {
                                insRRPV = maxRRPV;
                                rrpvperiods[1]++;
                            }
                            else if ((rrpvcounters[0]/8) >= rrpvcounters[insRRPV])
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 125)
                        {
                            if ((rrpvcounters[0]/2) <= rrpvcounters[1])
                            {
                                insRRPV = maxRRPV;
                                rrpvperiods[1]++;
                            }
                            else if ((rrpvcounters[0]/16) >= rrpvcounters[insRRPV])
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 119)
                        {
                            if ((rrpvcounters[0]/2) <= rrpvcounters[1])
                            {
                                insRRPV = maxRRPV;
                                rrpvperiods[1]++;
                            }
                            else if ((rrpvcounters[0]/4) >= rrpvcounters[insRRPV])
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 126)
                        {
                            if ((rrpvcounters[0]/2) <= rrpvcounters[1])
                            {
                                insRRPV = maxRRPV;
                                rrpvperiods[1]++;
                            }
                            else if (rrpvcounters[insRRPV] > (rrpvcounters[0]/4))
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 127)
                        {
                            if ((rrpvcounters[0]/2) <= rrpvcounters[1])
                            {
                                insRRPV = maxRRPV;
                                rrpvperiods[1]++;
                            }
                            else if ((rrpvcounters[0]/4) >= rrpvcounters[maxRRPV])
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 128)
                        {
                            if ((rrpvcounters[0]/2) <= rrpvcounters[insRRPV])
                            {
                                insRRPV = maxRRPV;
                                rrpvperiods[1]++;
                            }
                            else if (rrpvcounters[insRRPV] != 0)
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                            else
                            {
                                rrpvperiods[insRRPV-maxRRPV+1]++;
                            }
                        }
                        else if (mode == 129)
                        {
                            if (insRRPV == maxRRPV)
                            {
                                if (rrpvcounters[insRRPV] != 0)
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                }
                                else
                                {
                                    rrpvperiods[insRRPV-maxRRPV+1]++;
                                }
                            }
                            else
                            {
                                if ((rrpvcounters[0]/2) <= rrpvcounters[insRRPV])
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                }
                                else
                                {
                                    rrpvperiods[insRRPV-maxRRPV+1]++;
                                }
                            }
                        }
                        else if (mode == 130)
                        {
                            if ((rrpvcounters[0]/2) <= rrpvcounters[1])
                            {
                                insRRPV = maxRRPV;
                                rrpvperiods[1]++;
                            }
                            else if (((rrpvcounters[0]/4) >= rrpvcounters[insRRPV]) || (rrpvcounters[insRRPV] != 0))
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                            else
                            {
                                rrpvperiods[insRRPV-maxRRPV+1]++;
                            }
                        }
                        else if (mode == 131)
                        {
                            if ((rrpvcounters[0]/2) <= rrpvcounters[1])
                            {
                                insRRPV = maxRRPV;
                                rrpvperiods[1]++;
                            }
                            else if (((rrpvcounters[0]/4) >= rrpvcounters[insRRPV]) || (rrpvcounters[insRRPV] >= resetCount))
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                            else
                            {
                                rrpvperiods[insRRPV-maxRRPV+1]++;
                            }
                        }
                        else if (mode == 132)
                        {
                            if (rrpvcounters[insRRPV] <= resetCount)
                            {
                                insRRPV = maxRRPV;
                                rrpvperiods[1]++;
                            }
                            else
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 133)
                        {
                            if (rrpvcounters[insRRPV] <= resetCount)
                            {
                                if (((rrpvcounters[0]/2) > rrpvcounters[1]) && ((rrpvcounters[0]/4) >= rrpvcounters[insRRPV]))
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                }
                                else
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                }
                            }
                            else
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 134)
                        {
                            if (rrpvcounters[insRRPV] < resetCount)
                            {
                                if (((rrpvcounters[0]/2) > rrpvcounters[1]) && ((rrpvcounters[0]/4) >= rrpvcounters[insRRPV]))
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                }
                                else
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                }
                            }
                            else
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 135)
                        {
                            if (rrpvcounters[insRRPV] < resetCount)
                            {
                                if (rrpvcounters[0] >= resetCount)
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                }
                                else
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                }
                            }
                            else
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 136)
                        {
                            if (rrpvcounters[insRRPV] < resetCount)
                            {
                                if (((rrpvcounters[0]/2) > rrpvcounters[1]) && (((rrpvcounters[0]/4) >= rrpvcounters[insRRPV]) || (rrpvcounters[0] >= resetCount)))
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                }
                                else
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                }
                            }
                            else
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 137)
                        {
                            if (rrpvcounters[insRRPV] < (resetCount/2))
                            {
                                if (((rrpvcounters[0]/2) > rrpvcounters[1]) && (((rrpvcounters[0]/4) >= rrpvcounters[insRRPV]) || (rrpvcounters[0] >= resetCount)))
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                }
                                else
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                }
                            }
                            else
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 138)
                        {
                            if (rrpvcounters[insRRPV] < (resetCount/2))
                            {
                                if (((rrpvcounters[0]/2) > rrpvcounters[1]) && (((rrpvcounters[0]/4) >= rrpvcounters[insRRPV]) || (rrpvcounters[0] >= resetCount/2)))
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                }
                                else
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                }
                            }
                            else
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 139)
                        {
                            if (rrpvcounters[insRRPV] < (resetCount/2))
                            {
                                if (((rrpvcounters[0]/2) > rrpvcounters[1]) && (rrpvcounters[0] >= resetCount/2))
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                }
                                else
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                }
                            }
                            else
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 140)
                        {
                            if (rrpvcounters[insRRPV] < (resetCount/4))
                            {
                                if (((rrpvcounters[0]/2) > rrpvcounters[1]) && (rrpvcounters[0] >= resetCount/4))
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                }
                                else
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                }
                            }
                            else
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 141)
                        {
                            if (rrpvcounters[insRRPV] < (resetCount/2))
                            {
                                if (((rrpvcounters[0]/2) > rrpvcounters[1]) && (((rrpvcounters[0]/4) >= rrpvcounters[insRRPV]) || (rrpvcounters[0] >= resetCount/4)))
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                }
                                else
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                }
                            }
                            else
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 142)
                        {
                            if (rrpvcounters[insRRPV] < (resetCount/4))
                            {
                                if (((rrpvcounters[0]/2) > rrpvcounters[1]) && (((rrpvcounters[0]/4) >= rrpvcounters[insRRPV]) || (rrpvcounters[0] >= resetCount/4)))
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                }
                                else
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                }
                            }
                            else
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 144)
                        {
                            if (rrpvcounters[insRRPV] < (resetCount/4))
                            {
                                if ((rrpvcounters[0]/2) <= rrpvcounters[1])
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                }
                                else if ((rrpvcounters[0]/4) >= rrpvcounters[insRRPV])
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                }
                            }
                            else
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 145)
                        {
                            if (rrpvcounters[insRRPV] < (resetCount/4))
                            {
                                if (((rrpvcounters[0]/2) > rrpvcounters[1]) && (((rrpvcounters[0]/4) >= rrpvcounters[insRRPV]) || (rrpvcounters[0] >= resetCount/2)))
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                }
                                else
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                }
                            }
                            else
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 146)
                        {
                            if (rrpvcounters[insRRPV] < (resetCount/2))
                            {
                                if ((rrpvcounters[0]/2) <= rrpvcounters[1])
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                }
                                else if (((rrpvcounters[0]/4) >= rrpvcounters[insRRPV]) || (rrpvcounters[0] >= resetCount/2))
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                }
                            }
                            else
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 147)
                        {
                            if (rrpvcounters[insRRPV] < (resetCount/2))
                            {
                                if ((rrpvcounters[0]/2) <= rrpvcounters[1])
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                }
                                else if (((rrpvcounters[0]/4) >= rrpvcounters[insRRPV]) || (rrpvcounters[0] >= resetCount))
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                }
                            }
                            else
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 148)
                        {
                            if (rrpvcounters[insRRPV] < (resetCount/2))
                            {
                                if (insRRPV == (maxRRPV-1))
                                {
                                    if (rrpvcounters[0] < (resetCount/2))
                                    {
                                        insRRPV = maxRRPV;
                                        rrpvperiods[1]++;
                                    }
                                }
                                else
                                {
                                    if (((rrpvcounters[0]/2) > rrpvcounters[1]) && (((rrpvcounters[0]/4) >= rrpvcounters[insRRPV]) || (rrpvcounters[0] >= resetCount/2)))
                                    {
                                        insRRPV = maxRRPV-1;
                                        rrpvperiods[0]++;
                                    }
                                }
                            }
                            else
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 149)
                        {
                            if (rrpvcounters[insRRPV] < (resetCount/2))
                            {
                                if (insRRPV == (maxRRPV-1))
                                {
                                    if (rrpvcounters[0] < resetCount)
                                    {
                                        insRRPV = maxRRPV;
                                        rrpvperiods[1]++;
                                    }
                                }
                            }
                            else
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 150)
                        {
                            if (rrpvcounters[insRRPV] < (resetCount/2))
                            {
                                if (insRRPV == (maxRRPV-1))
                                {
                                    if (((rrpvcounters[0]/4) < rrpvcounters[insRRPV]) || (rrpvcounters[0] < resetCount))
                                    {
                                        insRRPV = maxRRPV;
                                        rrpvperiods[1]++;
                                    }
                                }
                            }
                            else
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 151)
                        {
                            if (rrpvcounters[insRRPV] < (resetCount/2))
                            {
                                if (insRRPV == (maxRRPV-1))
                                {
                                    if (rrpvcounters[0] < resetCount)
                                    {
                                        insRRPV = maxRRPV;
                                        rrpvperiods[1]++;
                                    }
                                    else
                                    {
                                        insRRPV = maxRRPV-1;
                                        rrpvperiods[0]++;
                                    }
                                }
                                else
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                }
                            }
                            else
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 152)
                        {
                            if (rrpvcounters[insRRPV] < (resetCount/16))
                            {
                                if (insRRPV == (maxRRPV-1))
                                {
                                    if (rrpvcounters[0] < resetCount)
                                    {
                                        insRRPV = maxRRPV;
                                        rrpvperiods[1]++;
                                    }
                                    else
                                    {
                                        insRRPV = maxRRPV-1;
                                        rrpvperiods[0]++;
                                    }
                                }
                                else
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                }
                            }
                            else
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 153)
                        {
                            if (rrpvcounters[insRRPV] < (resetCount/16))
                            {
                                if (insRRPV == (maxRRPV-1))
                                {
                                    if (rrpvcounters[0] < resetCount)
                                    {
                                        insRRPV = maxRRPV;
                                        rrpvperiods[1]++;
                                        rrpvperiods[3]++;
                                    }
                                    else
                                    {
                                        insRRPV = maxRRPV-1;
                                        rrpvperiods[0]++;
                                        rrpvperiods[2]++;
                                    }
                                }
                                else
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                }
                            }
                            else
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 154)
                        {
                            if (rrpvcounters[insRRPV] < (resetCount/32))
                            {
                                if (insRRPV == (maxRRPV-1))
                                {
                                    if (rrpvcounters[0] < resetCount)
                                    {
                                        insRRPV = maxRRPV;
                                        rrpvperiods[1]++;
                                        rrpvperiods[3]++;
                                    }
                                    else
                                    {
                                        insRRPV = maxRRPV-1;
                                        rrpvperiods[0]++;
                                        rrpvperiods[2]++;
                                    }
                                }
                                else
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                }
                            }
                            else
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 155)
                        {
                            if (!rrpvcounters[insRRPV])
                            {
                                if (insRRPV == maxRRPV-1)
                                {
                                    if (!rrpvcounters[0])
                                    {
                                        insRRPV = maxRRPV;
                                        rrpvperiods[1]++;
                                        rrpvperiods[3]++;
                                    }
                                    else
                                    {
                                        rrpvperiods[0]++;
                                        rrpvperiods[2]++;
                                    }
                                }
                                else 
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                    rrpvperiods[5]++;
                                }
                            }
                            else
                            {
                                if (insRRPV == maxRRPV-1)
                                {
                                    rrpvperiods[2]++;
                                }
                                else
                                {
                                    rrpvperiods[4]++;
                                }
                                rrpvperiods[0]++;
                                insRRPV = maxRRPV-1;
                            }
                        }
                        else if (mode == 156)
                        {
                            if (!rrpvcounters[insRRPV])
                            {
                                if (insRRPV == maxRRPV-1)
                                {
                                    if (rrpvcounters[0] <= (resetCount/2))
                                    {
                                        insRRPV = maxRRPV;
                                        rrpvperiods[1]++;
                                        rrpvperiods[3]++;
                                    }
                                    else
                                    {
                                        rrpvperiods[0]++;
                                        rrpvperiods[6]++;
                                    }
                                }
                                else 
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                    rrpvperiods[5]++;
                                }
                            }
                            else
                            {
                                if (insRRPV == maxRRPV-1)
                                {
                                    rrpvperiods[2]++;
                                }
                                else
                                {
                                    rrpvperiods[4]++;
                                }
                                rrpvperiods[0]++;
                                insRRPV = maxRRPV-1;
                            }
                        }
                        else if (mode == 157)
                        {
                            if (rrpvcounters[insRRPV] < (resetCount/2))
                            {
                                if (insRRPV == maxRRPV-1)
                                {
                                    if (rrpvcounters[0] < (resetCount/2))
                                    {
                                        insRRPV = maxRRPV;
                                        rrpvperiods[1]++;
                                        rrpvperiods[3]++;
                                    }
                                    else
                                    {
                                        rrpvperiods[0]++;
                                        rrpvperiods[6]++;
                                    }
                                }
                                else 
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                    rrpvperiods[5]++;
                                }
                            }
                            else
                            {
                                if (insRRPV == maxRRPV-1)
                                {
                                    rrpvperiods[2]++;
                                }
                                else
                                {
                                    rrpvperiods[4]++;
                                }
                                rrpvperiods[0]++;
                                insRRPV = maxRRPV-1;
                            }
                        }
                        else if (mode == 158)
                        {
                            if (rrpvcounters[insRRPV] < (resetCount/16))
                            {
                                if (insRRPV == maxRRPV-1)
                                {
                                    if (rrpvcounters[0] < (resetCount/2))
                                    {
                                        insRRPV = maxRRPV;
                                        rrpvperiods[1]++;
                                        rrpvperiods[3]++;
                                    }
                                    else
                                    {
                                        rrpvperiods[0]++;
                                        rrpvperiods[6]++;
                                    }
                                }
                                else 
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                    rrpvperiods[5]++;
                                }
                            }
                            else
                            {
                                if (insRRPV == maxRRPV-1)
                                {
                                    rrpvperiods[2]++;
                                }
                                else
                                {
                                    rrpvperiods[4]++;
                                }
                                rrpvperiods[0]++;
                                insRRPV = maxRRPV-1;
                            }
                        }
                        else if (mode == 159)
                        {
                            if (rrpvcounters[insRRPV] < (resetCount/32))
                            {
                                if (insRRPV == maxRRPV-1)
                                {
                                    if (rrpvcounters[0] < (resetCount/2))
                                    {
                                        insRRPV = maxRRPV;
                                        rrpvperiods[1]++;
                                        rrpvperiods[3]++;
                                    }
                                    else
                                    {
                                        rrpvperiods[0]++;
                                        rrpvperiods[6]++;
                                    }
                                }
                                else 
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                    rrpvperiods[5]++;
                                }
                            }
                            else
                            {
                                if (insRRPV == maxRRPV-1)
                                {
                                    rrpvperiods[2]++;
                                }
                                else
                                {
                                    rrpvperiods[4]++;
                                }
                                rrpvperiods[0]++;
                                insRRPV = maxRRPV-1;
                            }
                        }
                        else if (mode == 160)
                        {
                            if (rrpvcounters[insRRPV] < (resetCount/64))
                            {
                                if (insRRPV == maxRRPV-1)
                                {
                                    if (rrpvcounters[0] < (resetCount/2))
                                    {
                                        insRRPV = maxRRPV;
                                        rrpvperiods[1]++;
                                        rrpvperiods[3]++;
                                    }
                                    else
                                    {
                                        rrpvperiods[0]++;
                                        rrpvperiods[6]++;
                                    }
                                }
                                else 
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                    rrpvperiods[5]++;
                                }
                            }
                            else
                            {
                                if (insRRPV == maxRRPV-1)
                                {
                                    rrpvperiods[2]++;
                                }
                                else
                                {
                                    rrpvperiods[4]++;
                                }
                                rrpvperiods[0]++;
                                insRRPV = maxRRPV-1;
                            }
                        }
                        else if (mode == 161)
                        {
                            if (rrpvcounters[insRRPV] < (resetCount/16))
                            {
                                if (insRRPV == maxRRPV-1)
                                {
                                    if (rrpvcounters[0] < (resetCount/2))
                                    {
                                        insRRPV = maxRRPV;
                                        rrpvperiods[1]++;
                                        rrpvperiods[3]++;
                                    }
                                    else
                                    {
                                        rrpvperiods[0]++;
                                        rrpvperiods[6]++;
                                    }
                                }
                                else 
                                {
                                    if (rrpvcounters[0] < (resetCount/2))
                                    {
                                        insRRPV = maxRRPV-1;
                                        rrpvperiods[0]++;
                                        rrpvperiods[7]++;
                                    }
                                    else
                                    {
                                        rrpvperiods[1]++;
                                        rrpvperiods[5]++;
                                    }
                                }
                            }
                            else
                            {
                                if (insRRPV == maxRRPV-1)
                                {
                                    rrpvperiods[2]++;
                                }
                                else
                                {
                                    rrpvperiods[4]++;
                                }
                                rrpvperiods[0]++;
                                insRRPV = maxRRPV-1;
                            }
                        }
                        else if (mode == 162)
                        {
                            if (rrpvcounters[insRRPV] < (resetCount/16))
                            {
                                if (insRRPV == maxRRPV-1)
                                {
                                    if (rrpvcounters[0] < (resetCount/2))
                                    {
                                        insRRPV = maxRRPV;
                                        rrpvperiods[1]++;
                                        rrpvperiods[3]++;
                                    }
                                    else
                                    {
                                        rrpvperiods[0]++;
                                        rrpvperiods[6]++;
                                    }
                                }
                                else 
                                {
                                    if (rrpvcounters[insRRPV] >= (resetCount/2))
                                    {
                                        insRRPV = maxRRPV-1;
                                        rrpvperiods[0]++;
                                        rrpvperiods[7]++;
                                    }
                                    else
                                    {
                                        rrpvperiods[1]++;
                                        rrpvperiods[5]++;
                                    }
                                }
                            }
                            else
                            {
                                if (insRRPV == maxRRPV-1)
                                {
                                    rrpvperiods[2]++;
                                }
                                else
                                {
                                    rrpvperiods[4]++;
                                }
                                rrpvperiods[0]++;
                                insRRPV = maxRRPV-1;
                            }
                        }
                        else if (mode == 163)
                        {
                            if (rrpvcounters[0] < rrpvcounters[insRRPV])
                            {
                                if (rrpvcounters[1] <= rrpvcounters[0])
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                    rrpvperiods[5]++;
                                }
                                else
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                    rrpvperiods[6]++;
                                }
                            }
                            else
                            {
                                if (insRRPV == maxRRPV-1)
                                {
                                    rrpvperiods[2]++;
                                }
                                else
                                {
                                    rrpvperiods[4]++;
                                }
                                
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 100)
                        {
                            if (hitSum < resetCount/4)
                            {
                                if (insRRPV == maxRRPV)
                                {
                                    insRRPV = maxRRPV-1;
                                }
                                else
                                {
                                    insRRPV = maxRRPV;
                                }
                            }
                            else if((rrpvcounters[0] == 0) && (rrpvcounters[1] == 0) && (rrpvcounters[2] == 0))
                            {
                                insRRPV = maxRRPV;
                                rrpvperiods[1]++;
                            }
                            else if((rrpvcounters[0]/4) > rrpvcounters[1])
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 143)
                        {
                            if (rrpvcounters[insRRPV] < (resetCount/2))
                            {
                                if ((rrpvcounters[0]/2) <= rrpvcounters[1])
                                {
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                }
                                else if ((rrpvcounters[0]/4) >= rrpvcounters[insRRPV])
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                    rrpvperiods[4]++;
                                }
                                else
                                {
                                    if (insRRPV == (maxRRPV-1))
                                    {
                                        rrpvperiods[0]++;
                                        rrpvperiods[2]++;
                                    }
                                    else
                                    {
                                        rrpvperiods[1]++;
                                        rrpvperiods[3]++;
                                    }
                                }
                            }
                            else
                            {
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 164)
                        {
                            if (rrpvcounters[insRRPV] < (resetCount/2))
                            {
                                if ((rrpvcounters[0]/2) <= rrpvcounters[1])
                                {
                                    if (insRRPV == (maxRRPV-1))
                                    {
                                        cout << "FLIP 3: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                        rrpvperiods[3]++;
                                    }
                                    else
                                    {
                                        cout << "SAME 5: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                        rrpvperiods[5]++;
                                    }
                                    insRRPV = maxRRPV;
                                    rrpvperiods[1]++;
                                }
                                else if ((rrpvcounters[0]/4) >= rrpvcounters[insRRPV])
                                {
                                    if (insRRPV == (maxRRPV-1))
                                    {
                                        cout << "SAME 6: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                        rrpvperiods[6]++;
                                    }
                                    else
                                    {
                                        cout << "FLIP 7: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                        rrpvperiods[7]++;
                                    }
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                }
                                else
                                {
                                    if (insRRPV == (maxRRPV-1))
                                    {
                                        cout << "SAME 0: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                        rrpvperiods[0]++;
                                    }
                                    else
                                    {
                                        cout << "SAME 1: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                        rrpvperiods[1]++;
                                    }
                                }
                            }
                            else
                            {
                                if (insRRPV == (maxRRPV-1))
                                {
                                    cout << "SAME 2: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[2]++;
                                }
                                else
                                {
                                    cout << "FLIP 4: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[4]++;
                                }
                                insRRPV = maxRRPV-1;
                                rrpvperiods[0]++;
                            }
                        }
                        else if (mode == 165)
                        {
                            if (insRRPV == maxRRPV)
                            {
                                if (!hitSum)
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                    rrpvperiods[4]++;
                                }
                                else
                                {
                                    rrpvperiods[1]++;
                                    rrpvperiods[5]++;
                                }
                            }
                            else
                            {
                                if ((rrpvcounters[insRRPV] < (resetCount/2)) && (rrpvcounters[0] < (resetCount/2)))
                                {
                                    insRRPV = maxRRPV;                                    
                                    rrpvperiods[1]++;
                                    rrpvperiods[3]++;
                                }
                                else
                                {
                                    rrpvperiods[0]++;
                                    rrpvperiods[2]++;
                                }
                            }
                        }
                        else if (mode == 166)
                        {
                            if (insRRPV == maxRRPV)
                            {
                                if (hitSum < resetCount/2)
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                    rrpvperiods[4]++;
                                }
                                else
                                {
                                    rrpvperiods[1]++;
                                    rrpvperiods[5]++;
                                }
                            }
                            else
                            {
                                if ((rrpvcounters[insRRPV] < (resetCount/2)) && (rrpvcounters[0] < (resetCount/2)))
                                {
                                    insRRPV = maxRRPV;                                    
                                    rrpvperiods[1]++;
                                    rrpvperiods[3]++;
                                }
                                else
                                {
                                    rrpvperiods[0]++;
                                    rrpvperiods[2]++;
                                }
                            }
                        }
                        else if (mode == 167)
                        {
                            if (insRRPV == maxRRPV)
                            {
                                if (hitSum < resetCount/4)
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                    rrpvperiods[4]++;
                                }
                                else
                                {
                                    rrpvperiods[1]++;
                                    rrpvperiods[5]++;
                                }
                            }
                            else
                            {
                                if ((rrpvcounters[insRRPV] < (resetCount/2)) && (rrpvcounters[0] < (resetCount/2)))
                                {
                                    insRRPV = maxRRPV;                                    
                                    rrpvperiods[1]++;
                                    rrpvperiods[3]++;
                                }
                                else
                                {
                                    rrpvperiods[0]++;
                                    rrpvperiods[2]++;
                                }
                            }
                        }
                        else if (mode == 168)
                        {
                            if (insRRPV == maxRRPV)
                            {
                                if (!(rrpvcounters[insRRPV] < (resetCount/2)) || (!((rrpvcounters[0]/2) <= rrpvcounters[1]) && ((rrpvcounters[0]/4) >= rrpvcounters[insRRPV])))
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                    rrpvperiods[4]++;
                                }
                                else
                                {
                                    rrpvperiods[1]++;
                                    rrpvperiods[5]++;
                                }
                            }
                            else
                            {
                                if ((rrpvcounters[insRRPV] < (resetCount/2)) && ((rrpvcounters[0]/2) <= rrpvcounters[1]))
                                {
                                    insRRPV = maxRRPV;                                    
                                    rrpvperiods[1]++;
                                    rrpvperiods[3]++;
                                }
                                else
                                {
                                    rrpvperiods[0]++;
                                    rrpvperiods[2]++;
                                }
                            }
                        }
                        else if (mode == 169)
                        {
                            if (insRRPV == maxRRPV)
                            {
                                // If inserting in 3 and you have enough hits on newly inserted blocks then 
                                // this is an indication of getting back to good temporal locality 
                                if (rrpvcounters[insRRPV] >= (resetCount/2))
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                    rrpvperiods[4]++;
                                }
                                else
                                {
                                    rrpvperiods[1]++;
                                    rrpvperiods[5]++;
                                }
                            }
                            else
                            {
                                // If inserting in 2 and there are very few reuse hits on the newly inserted blocks or 
                                // the hits on 0 are less than double of 1 (because you had replacements on the upper blocks, 
                                // all zeros shifted to 1 and then you had mostly hits on 1 but not much reuse after gone to 0 position)
                                // then it means you are shifting to a phase with not very good temporal locality
                                if ((rrpvcounters[insRRPV] < (resetCount/2)) && ((rrpvcounters[0]/2) <= rrpvcounters[1]))
                                {
                                    insRRPV = maxRRPV;                                    
                                    rrpvperiods[1]++;
                                    rrpvperiods[3]++;
                                }
                                else
                                {
                                    rrpvperiods[0]++;
                                    rrpvperiods[2]++;
                                }
                            }
                        }
                        else if (mode == 170)
                        {
                            // If inserting in 2 and there are very few reuse hits on the newly inserted blocks or 
                            // the hits on 0 are less than double of 1 (because you had replacements on the upper blocks, 
                            // all zeros shifted to 1 and then you had mostly hits on 1 but not much reuse after gone to 0 position)
                            // then it means you are shifting to a phase with not very good temporal locality
                            // If inserting in 3 and you have enough hits on newly inserted blocks or hits concetrated on 0 position then 
                            // this is an indication of getting back to good temporal locality (the negative of below condition
                            int switchCondition = (rrpvcounters[insRRPV] < (resetCount/2)) && ((rrpvcounters[0]/2) <= rrpvcounters[1]);
                            if (insRRPV == maxRRPV)
                            {
                                if (!switchCondition)
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                    rrpvperiods[4]++;
                                }
                                else
                                {
                                    rrpvperiods[1]++;
                                    rrpvperiods[5]++;
                                }
                            }
                            else
                            {
                                if (switchCondition)
                                {
                                    insRRPV = maxRRPV;                                    
                                    rrpvperiods[1]++;
                                    rrpvperiods[3]++;
                                }
                                else
                                {
                                    rrpvperiods[0]++;
                                    rrpvperiods[2]++;
                                }
                            }
                        }
                        else if (mode == 171)
                        {
                            // If inserting in 2 and there are very few reuse hits on the newly inserted blocks or 
                            // the hits on 0 are less than double of 1 (because you had replacements on the upper blocks, 
                            // all zeros shifted to 1 and then you had mostly hits on 1 but not much reuse after gone to 0 position)
                            // then it means you are shifting to a phase with not very good temporal locality
                            // If inserting in 3 and you have enough hits on newly inserted blocks or hits concetrated on 0 position then 
                            // this is an indication of getting back to good temporal locality (the negative of below condition
                            int switchCondition = (rrpvcounters[insRRPV] < (resetCount >> 1)) && (rrpvcounters[0] <= (rrpvcounters[1] << 1));
                            if (insRRPV == maxRRPV)
                            {
                                if (!switchCondition)
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                    rrpvperiods[4]++;
                                }
                                else
                                {
                                    rrpvperiods[1]++;
                                    rrpvperiods[5]++;
                                }
                            }
                            else
                            {
                                if (switchCondition)
                                {
                                    insRRPV = maxRRPV;                                    
                                    rrpvperiods[1]++;
                                    rrpvperiods[3]++;
                                }
                                else
                                {
                                    rrpvperiods[0]++;
                                    rrpvperiods[2]++;
                                }
                            }
                        }
                        else if (mode == 172)
                        {
                            // If inserting in 2 and there are very few reuse hits on the newly inserted blocks or 
                            // the hits on 0 are less than double of 1 (because you had replacements on the upper blocks, 
                            // all zeros shifted to 1 and then you had mostly hits on 1 but not much reuse after gone to 0 position)
                            // then it means you are shifting to a phase with not very good temporal locality
                            // If inserting in 3 and you have enough hits on newly inserted blocks or hits concetrated on 0 position then 
                            // this is an indication of getting back to good temporal locality (the negative of below condition
                            int switchCondition = (rrpvcounters[insRRPV] < (resetCount >> 1)) && (rrpvcounters[0] <= (rrpvcounters[1] << 1));
                            if (insRRPV == maxRRPV)
                            {
                                if (!switchCondition && (rrpvcounters[0] >= (rrpvcounters[insRRPV] << 2)))
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                    rrpvperiods[4]++;
                                }
                                else
                                {
                                    rrpvperiods[1]++;
                                    rrpvperiods[5]++;
                                }
                            }
                            else
                            {
                                if (switchCondition)
                                {
                                    insRRPV = maxRRPV;                                    
                                    rrpvperiods[1]++;
                                    rrpvperiods[3]++;
                                }
                                else
                                {
                                    rrpvperiods[0]++;
                                    rrpvperiods[2]++;
                                }
                            }
                        }
                        else if (mode == 173)
                        {
                            // If inserting in 2 and there are very few reuse hits on the newly inserted blocks or 
                            // the hits on 0 are less than double of 1 (because you had replacements on the upper blocks, 
                            // all zeros shifted to 1 and then you had mostly hits on 1 but not much reuse after gone to 0 position)
                            // then it means you are shifting to a phase with not very good temporal locality
                            // If inserting in 3 and you have enough hits on newly inserted blocks or hits concetrated on 0 position then 
                            // this is an indication of getting back to good temporal locality (the negative of below condition
                            int switchCondition = (rrpvcounters[insRRPV] < (resetCount >> 1)) && (rrpvcounters[0] <= hitSum);
                            if (insRRPV == maxRRPV)
                            {
                                if (!switchCondition)
                                {
                                    insRRPV = maxRRPV-1;
                                    rrpvperiods[0]++;
                                    rrpvperiods[4]++;
                                }
                                else
                                {
                                    rrpvperiods[1]++;
                                    rrpvperiods[5]++;
                                }
                            }
                            else
                            {
                                if (switchCondition)
                                {
                                    insRRPV = maxRRPV;                                    
                                    rrpvperiods[1]++;
                                    rrpvperiods[3]++;
                                }
                                else
                                {
                                    rrpvperiods[0]++;
                                    rrpvperiods[2]++;
                                }
                            }
                        }    
                        else if (mode == 175)
                        {
                            // If inserting in 2 and there are very few reuse hits on the newly inserted blocks or 
                            // the hits on 0 are less 50% of the total (because you had replacements on the upper blocks, 
                            // all zeros shifted to > 0 and then you had mostly hits there but not much reuse after gone to 0 position)
                            // then it means you are shifting to a phase with not very good temporal locality
                            // If inserting in 3 and you have enough hits on newly inserted blocks or hits concetrated on 0 position then 
                            // this is an indication of getting back to good temporal locality (the negative of below condition)
                            int switchCondition = (rrpvcounters[insRRPV] < (resetCount >> 1)) && (rrpvcounters[0] <= (hitSum >> 1));
                            if (insRRPV == maxRRPV)
                            {
                                if (!switchCondition)
                                {
                                    insRRPV = maxRRPV-2;
                                    rrpvperiods[0]++;
                                    rrpvperiods[4]++;
                                }
                                else
                                {
                                    rrpvperiods[1]++;
                                    rrpvperiods[5]++;
                                }
                            }
                            else
                            {
                                if (switchCondition)
                                {
                                    insRRPV = maxRRPV;                                    
                                    rrpvperiods[1]++;
                                    rrpvperiods[3]++;
                                }
                                else
                                {
                                    rrpvperiods[0]++;
                                    rrpvperiods[2]++;
                                }
                            }
                        }    
                        else if (mode == 176)
                        {
                            // If inserting in 2 and there are very few reuse hits on the newly inserted blocks or 
                            // the hits on 0 are less 50% of the total (because you had replacements on the upper blocks, 
                            // all zeros shifted to > 0 and then you had mostly hits there but not much reuse after gone to 0 position)
                            // then it means you are shifting to a phase with not very good temporal locality
                            // If inserting in 3 and you have enough hits on newly inserted blocks or hits concetrated on 0 position then 
                            // this is an indication of getting back to good temporal locality (the negative of below condition)
                            int switchCondition = (rrpvcounters[insRRPV] < (resetCount >> 2)) && (rrpvcounters[0] <= (hitSum >> 1));
                            if (insRRPV == maxRRPV)
                            {
                                if (!switchCondition)
                                {
                                    insRRPV = maxRRPV-1;
                                    cout << "FLIP 4: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[0]++;
                                    rrpvperiods[4]++;
                                }
                                else
                                {
                                    cout << "SAME 5: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[1]++;
                                    rrpvperiods[5]++;
                                }
                            }
                            else
                            {
                                if (switchCondition)
                                {
                                    cout << "FLIP 3: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    insRRPV = maxRRPV;                                    
                                    rrpvperiods[1]++;
                                    rrpvperiods[3]++;
                                }
                                else
                                {
                                    cout << "SAME 2: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[0]++;
                                    rrpvperiods[2]++;
                                }
                            }
                        }    
                        else if (mode == 177)
                        {
                            // If inserting in 2 and there are very few reuse hits on the newly inserted blocks or 
                            // the hits on 0 are less 50% of the total (because you had replacements on the upper blocks, 
                            // all zeros shifted to > 0 and then you had mostly hits there but not much reuse after gone to 0 position)
                            // then it means you are shifting to a phase with not very good temporal locality
                            // If inserting in 3 and you have enough hits on newly inserted blocks or hits concetrated on 0 position then 
                            // this is an indication of getting back to good temporal locality (the negative of below condition)
                            int switchCondition = (rrpvcounters[insRRPV] < (resetCount >> 2)) && ((rrpvcounters[0]+rrpvcounters[insRRPV]) <= (hitSum >> 1));
                            if (insRRPV == maxRRPV)
                            {
                                if (!switchCondition)
                                {
                                    insRRPV = maxRRPV-1;
                                    cout << "FLIP 4: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[0]++;
                                    rrpvperiods[4]++;
                                }
                                else
                                {
                                    cout << "SAME 5: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[1]++;
                                    rrpvperiods[5]++;
                                }
                            }
                            else
                            {
                                if (switchCondition)
                                {
                                    cout << "FLIP 3: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    insRRPV = maxRRPV;                                    
                                    rrpvperiods[1]++;
                                    rrpvperiods[3]++;
                                }
                                else
                                {
                                    cout << "SAME 2: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[0]++;
                                    rrpvperiods[2]++;
                                }
                            }
                        }    
                        else if (mode == 178)
                        {
                            // If inserting in 2 and there are very few reuse hits on the newly inserted blocks or 
                            // the hits on 0 are less 50% of the total (because you had replacements on the upper blocks, 
                            // all zeros shifted to > 0 and then you had mostly hits there but not much reuse after gone to 0 position)
                            // then it means you are shifting to a phase with not very good temporal locality
                            // If inserting in 3 and you have enough hits on newly inserted blocks or hits concetrated on 0 position then 
                            // this is an indication of getting back to good temporal locality (the negative of below condition)
                            int switchCondition = (rrpvcounters[insRRPV] < (resetCount >> 1)) && ((rrpvcounters[0]+rrpvcounters[insRRPV]) <= (hitSum >> 1));
                            if (insRRPV == maxRRPV)
                            {
                                if (!switchCondition)
                                {
                                    insRRPV = maxRRPV-1;
                                    cout << "FLIP 4: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[0]++;
                                    rrpvperiods[4]++;
                                }
                                else
                                {
                                    cout << "SAME 5: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[1]++;
                                    rrpvperiods[5]++;
                                }
                            }
                            else
                            {
                                if (switchCondition)
                                {
                                    cout << "FLIP 3: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    insRRPV = maxRRPV;                                    
                                    rrpvperiods[1]++;
                                    rrpvperiods[3]++;
                                }
                                else
                                {
                                    cout << "SAME 2: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[0]++;
                                    rrpvperiods[2]++;
                                }
                            }
                        }    
                        else if (mode == 179)
                        {
                            // If inserting in 2 and there are very few reuse hits on the newly inserted blocks or 
                            // the hits on 0 are less 50% of the total (because you had replacements on the upper blocks, 
                            // all zeros shifted to > 0 and then you had mostly hits there but not much reuse after gone to 0 position)
                            // then it means you are shifting to a phase with not very good temporal locality
                            // If inserting in 3 and you have enough hits on newly inserted blocks or hits concetrated on 0 position then 
                            // this is an indication of getting back to good temporal locality (the negative of below condition)
                            int switchCondition = (rrpvcounters[insRRPV] < (resetCount >> 2)) && ((rrpvcounters[0]+rrpvcounters[insRRPV]) <= (hitSum >> 1));
                            if (insRRPV == maxRRPV)
                            {
                                if (!switchCondition)
                                {
                                    insRRPV = maxRRPV-1;
                                    cout << "FLIP 4: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[0]++;
                                    rrpvperiods[4]++;
                                }
                                else
                                {
                                    cout << "SAME 5: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[1]++;
                                    rrpvperiods[5]++;
                                }
                            }
                            else
                            {
                                if (switchCondition)
                                {
                                    cout << "FLIP 3: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    insRRPV = maxRRPV;                                    
                                    rrpvperiods[1]++;
                                    rrpvperiods[3]++;
                                }
                                else
                                {
                                    cout << "SAME 2: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[0]++;
                                    rrpvperiods[2]++;
                                }
                            }
                        }    
                        else if (mode == 180)
                        {
                            // If inserting in 2 and there are very few reuse hits on the newly inserted blocks or 
                            // the hits on 0 are less 50% of the total (because you had replacements on the upper blocks, 
                            // all zeros shifted to > 0 and then you had mostly hits there but not much reuse after gone to 0 position)
                            // then it means you are shifting to a phase with not very good temporal locality
                            // If inserting in 3 and you have enough hits on newly inserted blocks or hits concetrated on 0 position then 
                            // this is an indication of getting back to good temporal locality (the negative of below condition)
                            int switchCondition = (rrpvcounters[insRRPV] < resetCount) && ((rrpvcounters[0]+rrpvcounters[insRRPV]) <= (hitSum >> 1));
                            if (insRRPV == maxRRPV)
                            {
                                if (!switchCondition)
                                {
                                    insRRPV = maxRRPV-1;
                                    cout << "FLIP 4: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[0]++;
                                    rrpvperiods[4]++;
                                }
                                else
                                {
                                    cout << "SAME 5: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[1]++;
                                    rrpvperiods[5]++;
                                }
                            }
                            else
                            {
                                if (switchCondition)
                                {
                                    cout << "FLIP 3: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    insRRPV = maxRRPV;                                    
                                    rrpvperiods[1]++;
                                    rrpvperiods[3]++;
                                }
                                else
                                {
                                    cout << "SAME 2: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[0]++;
                                    rrpvperiods[2]++;
                                }
                            }
                        }    
                        else if (mode == 181)
                        {
                            // If inserting in 2 and there are very few reuse hits on the newly inserted blocks or 
                            // the hits on 0 are less 50% of the total (because you had replacements on the upper blocks, 
                            // all zeros shifted to > 0 and then you had mostly hits there but not much reuse after gone to 0 position)
                            // then it means you are shifting to a phase with not very good temporal locality
                            // If inserting in 3 and you have enough hits on newly inserted blocks or hits concetrated on 0 position then 
                            // this is an indication of getting back to good temporal locality (the negative of below condition)
                            int switchCondition1 = (rrpvcounters[insRRPV] < resetCount) && ((rrpvcounters[0]+rrpvcounters[insRRPV]) <= (hitSum >> 1));
                            int switchCondition2 = (rrpvcounters[insRRPV] < (resetCount >> 1)) && (rrpvcounters[0] <= (hitSum >> 1));
                            if (insRRPV == maxRRPV)
                            {
                                if (!switchCondition2)
                                {
                                    insRRPV = maxRRPV-1;
                                    cout << "FLIP 4: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[0]++;
                                    rrpvperiods[4]++;
                                }
                                else
                                {
                                    cout << "SAME 5: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[1]++;
                                    rrpvperiods[5]++;
                                }
                            }
                            else
                            {
                                if (switchCondition1)
                                {
                                    cout << "FLIP 3: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    insRRPV = maxRRPV;                                    
                                    rrpvperiods[1]++;
                                    rrpvperiods[3]++;
                                }
                                else
                                {
                                    cout << "SAME 2: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[0]++;
                                    rrpvperiods[2]++;
                                }
                            }
                        }    
                        else if (mode == 182)
                        {
                            // If inserting in 2 and there are very few reuse hits on the newly inserted blocks or 
                            // the hits on 0 are less 50% of the total (because you had replacements on the upper blocks, 
                            // all zeros shifted to > 0 and then you had mostly hits there but not much reuse after gone to 0 position)
                            // then it means you are shifting to a phase with not very good temporal locality
                            // If inserting in 3 and you have enough hits on newly inserted blocks or hits concetrated on 0 position then 
                            // this is an indication of getting back to good temporal locality (the negative of below condition)
                            int switchCondition1 = (rrpvcounters[insRRPV] < (resetCount >> 1)) && ((rrpvcounters[0]+rrpvcounters[insRRPV]) <= (hitSum >> 1));
                            int switchCondition2 = (rrpvcounters[insRRPV] < (resetCount >> 1)) && (rrpvcounters[0] <= (hitSum >> 1));
                            if (insRRPV == maxRRPV)
                            {
                                if (!switchCondition2)
                                {
                                    insRRPV = maxRRPV-1;
                                    cout << "FLIP 4: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[0]++;
                                    rrpvperiods[4]++;
                                }
                                else
                                {
                                    cout << "SAME 5: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[1]++;
                                    rrpvperiods[5]++;
                                }
                            }
                            else
                            {
                                if (switchCondition1)
                                {
                                    cout << "FLIP 3: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    insRRPV = maxRRPV;                                    
                                    rrpvperiods[1]++;
                                    rrpvperiods[3]++;
                                }
                                else
                                {
                                    cout << "SAME 2: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[0]++;
                                    rrpvperiods[2]++;
                                }
                            }
                        }    
                        else if (mode == 183)
                        {
                            // If inserting in 2 and there are very few reuse hits on the newly inserted blocks or 
                            // the hits on 0 are less 50% of the total (because you had replacements on the upper blocks, 
                            // all zeros shifted to > 0 and then you had mostly hits there but not much reuse after gone to 0 position)
                            // then it means you are shifting to a phase with not very good temporal locality
                            // If inserting in 3 and you have enough hits on newly inserted blocks or hits concetrated on 0 position then 
                            // this is an indication of getting back to good temporal locality (the negative of below condition)
                            int switchCondition1 = (rrpvcounters[insRRPV] < (resetCount >> 1)) && ((rrpvcounters[0]+rrpvcounters[insRRPV]) <= (hitSum >> 1));
                            int switchCondition2 = (rrpvcounters[insRRPV] < (resetCount >> 1)) && (rrpvcounters[0] < (hitSum >> 1));
                            if (insRRPV == maxRRPV)
                            {
                                if (!switchCondition2)
                                {
                                    insRRPV = maxRRPV-1;
                                    cout << "FLIP 4: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[0]++;
                                    rrpvperiods[4]++;
                                }
                                else
                                {
                                    cout << "SAME 5: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[1]++;
                                    rrpvperiods[5]++;
                                }
                            }
                            else
                            {
                                if (switchCondition1)
                                {
                                    cout << "FLIP 3: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    insRRPV = maxRRPV;                                    
                                    rrpvperiods[1]++;
                                    rrpvperiods[3]++;
                                }
                                else
                                {
                                    cout << "SAME 2: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[0]++;
                                    rrpvperiods[2]++;
                                }
                            }
                        }    
                        else if (mode == 184)
                        {
                            // If inserting in 2 and there are very few reuse hits on the newly inserted blocks or 
                            // the hits on 0 are less 50% of the total (because you had replacements on the upper blocks, 
                            // all zeros shifted to > 0 and then you had mostly hits there but not much reuse after gone to 0 position)
                            // then it means you are shifting to a phase with not very good temporal locality
                            // If inserting in 3 and you have enough hits on newly inserted blocks or hits concetrated on 0 position then 
                            // this is an indication of getting back to good temporal locality (the negative of below condition)
                            int switchCondition1 = (rrpvcounters[insRRPV] < (resetCount >> 1)) && ((rrpvcounters[0]+rrpvcounters[insRRPV]) <= (hitSum >> 1));
                            int switchCondition2 = (rrpvcounters[insRRPV] < (resetCount >> 2)) && (rrpvcounters[0] <= (hitSum >> 1));
                            if (insRRPV == maxRRPV)
                            {
                                if (!switchCondition2)
                                {
                                    insRRPV = maxRRPV-1;
                                    cout << "FLIP 4: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[0]++;
                                    rrpvperiods[4]++;
                                }
                                else
                                {
                                    cout << "SAME 5: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[1]++;
                                    rrpvperiods[5]++;
                                }
                            }
                            else
                            {
                                if (switchCondition1)
                                {
                                    cout << "FLIP 3: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    insRRPV = maxRRPV;                                    
                                    rrpvperiods[1]++;
                                    rrpvperiods[3]++;
                                }
                                else
                                {
                                    cout << "SAME 2: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[0]++;
                                    rrpvperiods[2]++;
                                }
                            }
                        }    
                        else if (mode == 185)
                        {
                            // If inserting in 2 and there are very few reuse hits on the newly inserted blocks or 
                            // the hits on 0 are less 50% of the total (because you had replacements on the upper blocks, 
                            // all zeros shifted to > 0 and then you had mostly hits there but not much reuse after gone to 0 position)
                            // then it means you are shifting to a phase with not very good temporal locality
                            // If inserting in 3 and you have enough hits on newly inserted blocks or hits concetrated on 0 position then 
                            // this is an indication of getting back to good temporal locality (the negative of below condition)
                            int switchCondition1 = (rrpvcounters[insRRPV] < resetCount) && ((rrpvcounters[0]+rrpvcounters[insRRPV]) <= (hitSum >> 1));
                            int switchCondition2 = (rrpvcounters[insRRPV] >= (resetCount >> 2)) || (rrpvcounters[0] > (hitSum >> 1));
                            if (insRRPV == maxRRPV)
                            {
                                if (switchCondition2)
                                {
                                    insRRPV = maxRRPV-1;
                                    cout << "FLIP 4: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[0]++;
                                    rrpvperiods[4]++;
                                }
                                else
                                {
                                    cout << "SAME 5: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[1]++;
                                    rrpvperiods[5]++;
                                }
                            }
                            else
                            {
                                if (switchCondition1)
                                {
                                    cout << "FLIP 3: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    insRRPV = maxRRPV;                                    
                                    rrpvperiods[1]++;
                                    rrpvperiods[3]++;
                                }
                                else
                                {
                                    cout << "SAME 2: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[0]++;
                                    rrpvperiods[2]++;
                                }
                            }
                        }
                        else if (mode == 186)
                        {
                            // If inserting in 2 and there are very few reuse hits on the newly inserted blocks or 
                            // the hits on 0 are less 50% of the total (because you had replacements on the upper blocks, 
                            // all zeros shifted to > 0 and then you had mostly hits there but not much reuse after gone to 0 position)
                            // then it means you are shifting to a phase with not very good temporal locality
                            // If inserting in 3 and you have enough hits on newly inserted blocks or hits concetrated on 0 position then 
                            // this is an indication of getting back to good temporal locality (the negative of below condition)
                            int switchInsRRPV3 = (rrpvcounters[insRRPV] < resetCount) && ((rrpvcounters[0]+rrpvcounters[insRRPV]) <= (hitSum >> 1));
                            int switchInsRRPV2 = (rrpvcounters[insRRPV] >= (resetCount >> 1)) || (rrpvcounters[0] > (hitSum >> 1));
                            if (insRRPV == maxRRPV)
                            {
                                if (switchInsRRPV2)
                                {
                                    insRRPV = maxRRPV-1;
                                    cout << "FLIP 4: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[0]++;
                                    rrpvperiods[4]++;
                                }
                                else
                                {
                                    cout << "SAME 5: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[1]++;
                                    rrpvperiods[5]++;
                                }
                            }
                            else
                            {
                                if (switchInsRRPV3)
                                {
                                    cout << "FLIP 3: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    insRRPV = maxRRPV;                                    
                                    rrpvperiods[1]++;
                                    rrpvperiods[3]++;
                                }
                                else
                                {
                                    cout << "SAME 2: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[0]++;
                                    rrpvperiods[2]++;
                                }
                            }
                        }
                        else if (mode == 187)
                        {
                            // If inserting in 2 and there are very few reuse hits on the newly inserted blocks or 
                            // the hits on 0 are less 50% of the total (because you had replacements on the upper blocks, 
                            // all zeros shifted to > 0 and then you had mostly hits there but not much reuse after gone to 0 position)
                            // then it means you are shifting to a phase with not very good temporal locality
                            // If inserting in 3 and you have enough hits on newly inserted blocks or hits concetrated on 0 position then 
                            // this is an indication of getting back to good temporal locality (the negative of below condition)
                            int switchInsRRPV3 = (rrpvcounters[insRRPV] < resetCount) && ((rrpvcounters[0]+rrpvcounters[insRRPV]) <= (hitSum >> 1));
                            int switchInsRRPV2 = (rrpvcounters[insRRPV] >= (resetCount >> 1)) || (rrpvcounters[0] > (hitSum >> 1)) || (rrpvcounters[insRRPV] > (hitSum >> 1));
                            if (insRRPV == maxRRPV)
                            {
                                if (switchInsRRPV2)
                                {
                                    insRRPV = maxRRPV-1;
                                    cout << "FLIP 4: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[0]++;
                                    rrpvperiods[4]++;
                                }
                                else
                                {
                                    cout << "SAME 5: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[1]++;
                                    rrpvperiods[5]++;
                                }
                            }
                            else
                            {
                                if (switchInsRRPV3)
                                {
                                    cout << "FLIP 3: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    insRRPV = maxRRPV;                                    
                                    rrpvperiods[1]++;
                                    rrpvperiods[3]++;
                                }
                                else
                                {
                                    cout << "SAME 2: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[0]++;
                                    rrpvperiods[2]++;
                                }
                            }
                        }
                        else if (mode == 188)
                        {
                            // If inserting in 2 and there are very few reuse hits on the newly inserted blocks or 
                            // the hits on 0 are less 50% of the total (because you had replacements on the upper blocks, 
                            // all zeros shifted to > 0 and then you had mostly hits there but not much reuse after gone to 0 position)
                            // then it means you are shifting to a phase with not very good temporal locality
                            // If inserting in 3 and you have enough hits on newly inserted blocks or hits concetrated on 0 position then 
                            // this is an indication of getting back to good temporal locality (the negative of below condition)
                            int switchInsRRPV3 = (rrpvcounters[insRRPV] < resetCount) && ((rrpvcounters[0]+rrpvcounters[insRRPV]) <= (hitSum >> 1));
                            int switchInsRRPV2 = (rrpvcounters[insRRPV] >= (resetCount >> 1)) || (rrpvcounters[insRRPV] > (hitSum >> 1));
                            if (insRRPV == maxRRPV)
                            {
                                if (switchInsRRPV2)
                                {
                                    insRRPV = maxRRPV-1;
                                    cout << "FLIP 4: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[0]++;
                                    rrpvperiods[4]++;
                                }
                                else
                                {
                                    cout << "SAME 5: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[1]++;
                                    rrpvperiods[5]++;
                                }
                            }
                            else
                            {
                                if (switchInsRRPV3)
                                {
                                    cout << "FLIP 3: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    insRRPV = maxRRPV;                                    
                                    rrpvperiods[1]++;
                                    rrpvperiods[3]++;
                                }
                                else
                                {
                                    cout << "SAME 2: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[0]++;
                                    rrpvperiods[2]++;
                                }
                            }
                        }
                        else if (mode == 189)
                        {
                            // If inserting in 2 and there are very few reuse hits on the newly inserted blocks or 
                            // the hits on 0 are less 50% of the total (because you had replacements on the upper blocks, 
                            // all zeros shifted to > 0 and then you had mostly hits there but not much reuse after gone to 0 position)
                            // then it means you are shifting to a phase with not very good temporal locality
                            // If inserting in 3 and you have enough hits on newly inserted blocks or hits concetrated on 0 position then 
                            // this is an indication of getting back to good temporal locality (the negative of below condition)
                            int switchInsRRPV3 = (rrpvcounters[insRRPV] < (resetCount >> 1)) && (rrpvcounters[0] <= (hitSum >> 1));
                            int switchInsRRPV2 = (rrpvcounters[insRRPV] >= (resetCount >> 1)) || (rrpvcounters[0] > (hitSum >> 1)) || (rrpvcounters[insRRPV] > (hitSum >> 1));
                            if (insRRPV == maxRRPV)
                            {
                                if (switchInsRRPV2)
                                {
                                    insRRPV = maxRRPV-1;
                                    cout << "FLIP 4: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[0]++;
                                    rrpvperiods[4]++;
                                }
                                else
                                {
                                    cout << "SAME 5: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[1]++;
                                    rrpvperiods[5]++;
                                }
                            }
                            else
                            {
                                if (switchInsRRPV3)
                                {
                                    cout << "FLIP 3: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    insRRPV = maxRRPV;                                    
                                    rrpvperiods[1]++;
                                    rrpvperiods[3]++;
                                }
                                else
                                {
                                    cout << "SAME 2: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[0]++;
                                    rrpvperiods[2]++;
                                }
                            }
                        }
                        else if (mode == 190)
                        {
                            // If inserting in 2 and there are very few reuse hits on the newly inserted blocks or 
                            // the hits on 0 are less 50% of the total (because you had replacements on the upper blocks, 
                            // all zeros shifted to > 0 and then you had mostly hits there but not much reuse after gone to 0 position)
                            // then it means you are shifting to a phase with not very good temporal locality
                            // If inserting in 3 and you have enough hits on newly inserted blocks or hits concetrated on 0 position then 
                            // this is an indication of getting back to good temporal locality (the negative of below condition)
                            int switchInsRRPV3 = (rrpvcounters[insRRPV] < (resetCount >> 1)) && ((rrpvcounters[0]+rrpvcounters[insRRPV]) <= (hitSum >> 1));
                            int switchInsRRPV2 = (rrpvcounters[insRRPV] >= (resetCount >> 1)) || (rrpvcounters[0] > (hitSum >> 1)) || (rrpvcounters[insRRPV] > (hitSum >> 1));
                            if (insRRPV == maxRRPV)
                            {
                                if (switchInsRRPV2)
                                {
                                    insRRPV = maxRRPV-1;
                                    cout << "FLIP 4: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[0]++;
                                    rrpvperiods[4]++;
                                }
                                else
                                {
                                    cout << "SAME 5: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[1]++;
                                    rrpvperiods[5]++;
                                }
                            }
                            else
                            {
                                if (switchInsRRPV3)
                                {
                                    cout << "FLIP 3: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    insRRPV = maxRRPV;                                    
                                    rrpvperiods[1]++;
                                    rrpvperiods[3]++;
                                }
                                else
                                {
                                    cout << "SAME 2: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[0]++;
                                    rrpvperiods[2]++;
                                }
                            }
                        }
                        else if (mode == 192)
                        {
                            // If inserting in 2 and there are very few reuse hits on the newly inserted blocks or 
                            // the hits on 0 are less 50% of the total (because you had replacements on the upper blocks, 
                            // all zeros shifted to > 0 and then you had mostly hits there but not much reuse after gone to 0 position)
                            // then it means you are shifting to a phase with not very good temporal locality
                            // If inserting in 3 and you have enough hits on newly inserted blocks or hits concetrated on 0 position then 
                            // this is an indication of getting back to good temporal locality (the negative of below condition)
                            int switchInsRRPV3 = (rrpvcounters[insRRPV] < (resetCount >> 1)) && ((rrpvcounters[0]+rrpvcounters[insRRPV]) <= ((hitSum >> 1)+(hitSum >> 2)));
                            int switchInsRRPV2 = (rrpvcounters[insRRPV] >= (resetCount >> 1)) || (rrpvcounters[0] > (hitSum >> 1));
                            if (insRRPV == maxRRPV)
                            {
                                if (switchInsRRPV2)
                                {
                                    insRRPV = maxRRPV-1;
                                    cout << "FLIP 4: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[0]++;
                                    rrpvperiods[4]++;
                                }
                                else
                                {
                                    cout << "SAME 5: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[1]++;
                                    rrpvperiods[5]++;
                                }
                            }
                            else
                            {
                                if (switchInsRRPV3)
                                {
                                    cout << "FLIP 3: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    insRRPV = maxRRPV;                                    
                                    rrpvperiods[1]++;
                                    rrpvperiods[3]++;
                                }
                                else
                                {
                                    cout << "SAME 2: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[0]++;
                                    rrpvperiods[2]++;
                                }
                            }
                        }
                        else if (mode == 193)
                        {
                            // If inserting in 2 and there are very few reuse hits on the newly inserted blocks or 
                            // the hits on 0 are less 50% of the total (because you had replacements on the upper blocks, 
                            // all zeros shifted to > 0 and then you had mostly hits there but not much reuse after gone to 0 position)
                            // then it means you are shifting to a phase with not very good temporal locality
                            // If inserting in 3 and you have enough hits on newly inserted blocks or hits concetrated on 0 position then 
                            // this is an indication of getting back to good temporal locality (the negative of below condition)
                            int switchInsRRPV3 = (rrpvcounters[insRRPV] < (resetCount >> 1)) && (((rrpvcounters[0]+rrpvcounters[insRRPV]) <= (hitSum >> 1)) || (hitSum < (resetCount >> 2)));
                            int switchInsRRPV2 = (rrpvcounters[insRRPV] >= (resetCount >> 1)) || (rrpvcounters[0] > (hitSum >> 1));
                            if (insRRPV == maxRRPV)
                            {
                                if (switchInsRRPV2)
                                {
                                    insRRPV = maxRRPV-1;
                                    cout << "FLIP 4: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[0]++;
                                    rrpvperiods[4]++;
                                }
                                else
                                {
                                    cout << "SAME 5: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[1]++;
                                    rrpvperiods[5]++;
                                }
                            }
                            else
                            {
                                if (switchInsRRPV3)
                                {
                                    cout << "FLIP 3: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    insRRPV = maxRRPV;                                    
                                    rrpvperiods[1]++;
                                    rrpvperiods[3]++;
                                }
                                else
                                {
                                    cout << "SAME 2: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[0]++;
                                    rrpvperiods[2]++;
                                }
                            }
                        }
                        else if (mode == 194)
                        {
                            // If inserting in 2 and there are very few reuse hits on the newly inserted blocks or 
                            // the hits on 0 are less 50% of the total (because you had replacements on the upper blocks, 
                            // all zeros shifted to > 0 and then you had mostly hits there but not much reuse after gone to 0 position)
                            // then it means you are shifting to a phase with not very good temporal locality
                            // If inserting in 3 and you have enough hits on newly inserted blocks or hits concetrated on 0 position then 
                            // this is an indication of getting back to good temporal locality (the negative of below condition)
                            int switchInsRRPV3 = (rrpvcounters[insRRPV] < (resetCount >> 1)) && (((rrpvcounters[0]+rrpvcounters[insRRPV]) <= (hitSum >> 1)) || (hitSum < (resetCount >> 2)));
                            int switchInsRRPV2 = (rrpvcounters[insRRPV] >= (resetCount >> 1)) || (rrpvcounters[0] > (hitSum >> 1));
                            if (insRRPV == maxRRPV)
                            {
                                if (!switchInsRRPV3)
                                {
                                    insRRPV = maxRRPV-1;
                                    cout << "FLIP 4: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[0]++;
                                    rrpvperiods[4]++;
                                }
                                else
                                {
                                    cout << "SAME 5: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[1]++;
                                    rrpvperiods[5]++;
                                }
                            }
                            else
                            {
                                if (switchInsRRPV3)
                                {
                                    cout << "FLIP 3: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    insRRPV = maxRRPV;                                    
                                    rrpvperiods[1]++;
                                    rrpvperiods[3]++;
                                }
                                else
                                {
                                    cout << "SAME 2: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[0]++;
                                    rrpvperiods[2]++;
                                }
                            }
                        }
                        else if (mode == 195)
                        {
                            // If inserting in 2 and there are very few reuse hits on the newly inserted blocks or 
                            // the hits on 0 are less 50% of the total (because you had replacements on the upper blocks, 
                            // all zeros shifted to > 0 and then you had mostly hits there but not much reuse after gone to 0 position)
                            // then it means you are shifting to a phase with not very good temporal locality
                            // If inserting in 3 and you have enough hits on newly inserted blocks or hits concetrated on 0 position then 
                            // this is an indication of getting back to good temporal locality (the negative of below condition)
                            int switchInsRRPV3 = (rrpvcounters[insRRPV] < (resetCount >> 1)) && (((rrpvcounters[0]+rrpvcounters[insRRPV]) <= (hitSum >> 1)) || (hitSum < (resetCount >> 2)));
                            int switchInsRRPV2 = !switchInsRRPV3 || (hitSum == rrpvcounters[insRRPV]);
                            if (insRRPV == maxRRPV)
                            {
                                if (switchInsRRPV2)
                                {
                                    insRRPV = maxRRPV-1;
                                    cout << "FLIP 4: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[0]++;
                                    rrpvperiods[4]++;
                                }
                                else
                                {
                                    cout << "SAME 5: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[1]++;
                                    rrpvperiods[5]++;
                                }
                            }
                            else
                            {
                                if (switchInsRRPV3)
                                {
                                    cout << "FLIP 3: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    insRRPV = maxRRPV;                                    
                                    rrpvperiods[1]++;
                                    rrpvperiods[3]++;
                                }
                                else
                                {
                                    cout << "SAME 2: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                    rrpvperiods[0]++;
                                    rrpvperiods[2]++;
                                }
                            }
                        }
                    }
                    else if (mode == 174)
                    {
                        // If inserting in 2 and there are very few reuse hits on the newly inserted blocks or 
                        // the hits on 0 are less 50% of the total (because you had replacements on the upper blocks, 
                        // all zeros shifted to > 0 and then you had mostly hits there but not much reuse after gone to 0 position)
                        // then it means you are shifting to a phase with not very good temporal locality
                        // If inserting in 3 and you have enough hits on newly inserted blocks or hits concetrated on 0 position then 
                        // this is an indication of getting back to good temporal locality (the negative of below condition)
                        int switchCondition = (rrpvcounters[insRRPV] < (resetCount >> 1)) && (rrpvcounters[0] <= (hitSum >> 1));
                        if (insRRPV == maxRRPV)
                        {
                            if (!switchCondition)
                            {
                                insRRPV = maxRRPV-1;
                                cout << "FLIP 4: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                rrpvperiods[0]++;
                                rrpvperiods[4]++;
                            }
                            else
                            {
                                cout << "SAME 5: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                rrpvperiods[1]++;
                                rrpvperiods[5]++;
                            }
                        }
                        else
                        {
                            if (switchCondition)
                            {
                                cout << "FLIP 3: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                insRRPV = maxRRPV;                                    
                                rrpvperiods[1]++;
                                rrpvperiods[3]++;
                            }
                            else
                            {
                                cout << "SAME 2: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                rrpvperiods[0]++;
                                rrpvperiods[2]++;
                            }
                        }
                    }
                    else if (mode == 191)
                    {
                        // If inserting in 2 and there are very few reuse hits on the newly inserted blocks or 
                        // the hits on 0 are less 50% of the total (because you had replacements on the upper blocks, 
                        // all zeros shifted to > 0 and then you had mostly hits there but not much reuse after gone to 0 position)
                        // then it means you are shifting to a phase with not very good temporal locality
                        // If inserting in 3 and you have enough hits on newly inserted blocks or hits concetrated on 0 position then 
                        // this is an indication of getting back to good temporal locality (the negative of below condition)
                        int switchInsRRPV3 = (rrpvcounters[insRRPV] < (resetCount >> 1)) && ((rrpvcounters[0]+rrpvcounters[insRRPV]) <= (hitSum >> 1));
                        int switchInsRRPV2 = (rrpvcounters[insRRPV] >= (resetCount >> 1)) || (rrpvcounters[0] > (hitSum >> 1));
                        if (insRRPV == maxRRPV)
                        {
                            if (switchInsRRPV2)
                            {
                                insRRPV = maxRRPV-1;
                                cout << "FLIP 4: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                rrpvperiods[0]++;
                                rrpvperiods[4]++;
                            }
                            else
                            {
                                cout << "SAME 5: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                rrpvperiods[1]++;
                                rrpvperiods[5]++;
                            }
                        }
                        else
                        {
                            if (switchInsRRPV3)
                            {
                                cout << "FLIP 3: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                insRRPV = maxRRPV;                                    
                                rrpvperiods[1]++;
                                rrpvperiods[3]++;
                            }
                            else
                            {
                                cout << "SAME 2: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                rrpvperiods[0]++;
                                rrpvperiods[2]++;
                            }
                        }
                    }
                    else if (mode == 196)
                    {
                        // If inserting in 2 and there are very few reuse hits on the newly inserted blocks or 
                        // the hits on 0 are less 50% of the total (because you had replacements on the upper blocks, 
                        // all zeros shifted to > 0 and then you had mostly hits there but not much reuse after gone to 0 position)
                        // then it means you are shifting to a phase with not very good temporal locality
                        // If inserting in 3 and you have enough hits on newly inserted blocks or hits concetrated on 0 position then 
                        // this is an indication of getting back to good temporal locality (the negative of below condition)
                        int switchInsRRPV3 = (rrpvcounters[insRRPV] < (resetCount >> 1)) && ((rrpvcounters[0]+rrpvcounters[insRRPV]) <= (hitSum >> 1));
                        int switchInsRRPV2 = (rrpvcounters[insRRPV] >= (resetCount >> 1)) || (rrpvcounters[0] > (hitSum >> 1)) || (hitSum == 0);
                        if (insRRPV == maxRRPV)
                        {
                            if (switchInsRRPV2)
                            {
                                insRRPV = maxRRPV-1;
                                cout << "FLIP 4: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                rrpvperiods[0]++;
                                rrpvperiods[4]++;
                            }
                            else
                            {
                                cout << "SAME 5: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                rrpvperiods[1]++;
                                rrpvperiods[5]++;
                            }
                        }
                        else
                        {
                            if (switchInsRRPV3)
                            {
                                cout << "FLIP 3: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                insRRPV = maxRRPV;                                    
                                rrpvperiods[1]++;
                                rrpvperiods[3]++;
                            }
                            else
                            {
                                cout << "SAME 2: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                rrpvperiods[0]++;
                                rrpvperiods[2]++;
                            }
                        }
                    }
                    else if (mode == 197)
                    {
                        // If inserting in 2 and there are very few reuse hits on the newly inserted blocks or 
                        // the hits on 0 are less 50% of the total (because you had replacements on the upper blocks, 
                        // all zeros shifted to > 0 and then you had mostly hits there but not much reuse after gone to 0 position)
                        // then it means you are shifting to a phase with not very good temporal locality
                        // If inserting in 3 and you have enough hits on newly inserted blocks or hits concetrated on 0 position then 
                        // this is an indication of getting back to good temporal locality (the negative of below condition)
                        int switchInsRRPV3 = (rrpvcounters[insRRPV] < (resetCount >> 1)) && (rrpvcounters[0] <= (hitSum >> 1));
                        int switchInsRRPV2 = ((rrpvcounters[insRRPV]+rrpvcounters[insRRPV-1]) >= (resetCount >> 2)) || (rrpvcounters[0] > (hitSum >> 1));
                        if (insRRPV == maxRRPV)
                        {
                            if (switchInsRRPV2)
                            {
                                insRRPV = maxRRPV-1;
                                cout << "FLIP 4: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                rrpvperiods[0]++;
                                rrpvperiods[4]++;
                            }
                            else
                            {
                                cout << "SAME 5: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                rrpvperiods[1]++;
                                rrpvperiods[5]++;
                            }
                        }
                        else
                        {
                            if (switchInsRRPV3)
                            {
                                cout << "FLIP 3: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                insRRPV = maxRRPV;                                    
                                rrpvperiods[1]++;
                                rrpvperiods[3]++;
                            }
                            else
                            {
                                cout << "SAME 2: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                rrpvperiods[0]++;
                                rrpvperiods[2]++;
                            }
                        }
                    }
                    else if (mode == 198)
                    {
                        // If inserting in 2 and there are very few reuse hits on the newly inserted blocks or 
                        // the hits on 0 are less 50% of the total (because you had replacements on the upper blocks, 
                        // all zeros shifted to > 0 and then you had mostly hits there but not much reuse after gone to 0 position)
                        // then it means you are shifting to a phase with not very good temporal locality
                        // If inserting in 3 and you have enough hits on newly inserted blocks or hits concetrated on 0 position then 
                        // this is an indication of getting back to good temporal locality (the negative of below condition)
                        int switchInsRRPV3 = (rrpvcounters[insRRPV] < (resetCount >> 1)) && ((rrpvcounters[0]+rrpvcounters[insRRPV]) <= (hitSum >> 1));
                        int switchInsRRPV2 = ((rrpvcounters[insRRPV]+rrpvcounters[insRRPV-1]) >= (resetCount >> 2)) || (rrpvcounters[0] > (hitSum >> 1));
                        if (insRRPV == maxRRPV)
                        {
                            if (switchInsRRPV2)
                            {
                                insRRPV = maxRRPV-1;
                                cout << "FLIP 4: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                rrpvperiods[0]++;
                                rrpvperiods[4]++;
                            }
                            else
                            {
                                cout << "SAME 5: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                rrpvperiods[1]++;
                                rrpvperiods[5]++;
                            }
                        }
                        else
                        {
                            if (switchInsRRPV3)
                            {
                                cout << "FLIP 3: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                insRRPV = maxRRPV;                                    
                                rrpvperiods[1]++;
                                rrpvperiods[3]++;
                            }
                            else
                            {
                                cout << "SAME 2: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                rrpvperiods[0]++;
                                rrpvperiods[2]++;
                            }
                        }
                    }
                    else if (mode == 200)
                    {
                        // If inserting in 2 and there are very few reuse hits on the newly inserted blocks or 
                        // the hits on 0 are less 50% of the total (because you had replacements on the upper blocks, 
                        // all zeros shifted to > 0 and then you had mostly hits there but not much reuse after gone to 0 position)
                        // then it means you are shifting to a phase with not very good temporal locality
                        // If inserting in 3 and you have enough hits on newly inserted blocks or hits concetrated on 0 position then 
                        // this is an indication of getting back to good temporal locality (the negative of below condition)
                        int switchInsRRPV3 = (rrpvcounters[insRRPV] < (resetCount >> 1)) && ((rrpvcounters[0]+rrpvcounters[insRRPV]) <= (hitSum >> 1)) && (rrpvcounters[maxRRPV] <= (hitSum >> 1));
                        int switchInsRRPV2 = (rrpvcounters[insRRPV] >= (resetCount >> 1)) || (rrpvcounters[0] > (hitSum >> 1)) || (hitSum == 0);
                        if (insRRPV == maxRRPV)
                        {
                            if (switchInsRRPV2)
                            {
                                insRRPV = maxRRPV-1;
                                cout << "FLIP 4: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                rrpvperiods[0]++;
                                rrpvperiods[4]++;
                            }
                            else
                            {
                                cout << "SAME 5: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                rrpvperiods[1]++;
                                rrpvperiods[5]++;
                            }
                        }
                        else
                        {
                            if (switchInsRRPV3)
                            {
                                cout << "FLIP 3: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                insRRPV = maxRRPV;                                    
                                rrpvperiods[1]++;
                                rrpvperiods[3]++;
                            }
                            else
                            {
                                cout << "SAME 2: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                rrpvperiods[0]++;
                                rrpvperiods[2]++;
                            }
                        }
                    }
                    else if (mode == 201)
                    {
                        // If inserting in 2 and there are very few reuse hits on the newly inserted blocks or 
                        // the hits on 0 are less 50% of the total (because you had replacements on the upper blocks, 
                        // all zeros shifted to > 0 and then you had mostly hits there but not much reuse after gone to 0 position)
                        // then it means you are shifting to a phase with not very good temporal locality
                        // If inserting in 3 and you have enough hits on newly inserted blocks or hits concetrated on 0 position then 
                        // this is an indication of getting back to good temporal locality (the negative of below condition)
                        int switchInsRRPV2 = (rrpvcounters[0]+rrpvcounters[1]+rrpvcounters[2]) < (resetCount >> 2);
                        int switchInsRRPV3 = (rrpvcounters[insRRPV] < (resetCount >> 2)) && ((rrpvcounters[0]+rrpvcounters[insRRPV]) <= (hitSum >> 1));
                        if (insRRPV == maxRRPV)
                        {
                            if (switchInsRRPV2)
                            {
                                insRRPV = maxRRPV-1;
                                cout << "FLIP 4: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                rrpvperiods[0]++;
                                rrpvperiods[4]++;
                            }
                            else
                            {
                                cout << "SAME 5: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                rrpvperiods[1]++;
                                rrpvperiods[5]++;
                            }
                        }
                        else
                        {
                            if (switchInsRRPV3)
                            {
                                cout << "FLIP 3: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                insRRPV = maxRRPV;                                    
                                rrpvperiods[1]++;
                                rrpvperiods[3]++;
                            }
                            else
                            {
                                cout << "SAME 2: " << rrpvcounters[0] << " " << rrpvcounters[1]  << " " << rrpvcounters[2] << " " << rrpvcounters[3];
                                rrpvperiods[0]++;
                                rrpvperiods[2]++;
                            }
                        }
                    }                    
                    else
                    {
                        insRRPV = mode - 5; // Always 0, 1, 2, or 3
                    }
                    
                    cout << " " << cpu << " " << current_core_cycle << " " << global_instr_unique_id << endl;
                    
                    if (countresetflag)
                    {
                        for (int i=0; i<(maxRRPV+1); i++) 
                        {
                            rrpvcountersPerSet[set][i] = 0;
                            rrpvcounters[i] = 0;
                        }
                        
                        if (mode == 2)
                        {
                            insRRPV = maxRRPV-1;
                        }
                    }
                    
                    if (PID)
                    {
                        insRRPV = 2+PID_result(insRRPV);
                    }
                    
                    insRRPVPerSet[set] = insRRPV;
                }
                
                if (reuseDisable || !reuse[set][i])
                {
                    rrpvrepl[(maxRRPV-countIncreases)+(reuse[set][i]*(maxRRPV+1))]++;
                    // if no reuse and on insRRPV = 2 phase
                    if (usePredictor)
                    {
                        // Update predictor
                        int predSet = block[set][i].address & ((1 << predictorIndexSize) - 1);
                        
                        if (usePredictor == 1 && !reuse[set][i] && (insRRPV != maxRRPV))
                        {
                            predictorArray[predSet] = 0;
                        }
                        else if (usePredictor == 2)
                        {
                            if (!reuse[set][i])
                            {
                                predictorArray[predSet] = 0;
                            }
                            else
                            {
                                predictorArray[predSet] = prevInsRRPV;
                            }
                        }
                    }
                    return i;
                }
            }
        }
        
        if (savedReplacement != LLC_WAY+1)
        {
            rrpvrepl[(maxRRPV-countIncreases)+(reuse[set][savedReplacement]*(maxRRPV+1))]++;            
            // if no reuse and on insRRPV = 2 phase
            if (usePredictor)
            {
                // Update predictor
                int predSet = block[set][savedReplacement].address & ((1 << predictorIndexSize) - 1);
                
                if (usePredictor == 1 && !reuse[set][savedReplacement] && (insRRPV != maxRRPV))
                {
                    predictorArray[predSet] = 0;
                }
                else if (usePredictor == 2)
                {
                    if (!reuse[set][savedReplacement])
                    {
                        predictorArray[predSet] = 0;
                    }
                    else
                    {
                        // If prediction equal to 0 then update with prevInsRRPV
                        if (predictorArray[predSet] == 0)
                        {
                            predictorArray[predSet] = prevInsRRPV;
                        }
                        // If prediction equal to prevIns then do nothing
                        else if (predictorArray[predSet] == prevInsRRPV)
                        {
                        }
                        // If not zero and not the same as before it means it hit on both values so set predictor to maxRRPV+1
                        else
                        {
                            predictorArray[predSet] =  maxRRPV+1;                            
                        }
                    }
                }
            }
            return savedReplacement;
        }
        
        // Count how many times we increased
        countIncreases++;
        
        for (int i=0; i<LLC_WAY; i++)
            rrpv[set][i]++;
    }
    
    // WE SHOULD NOT REACH HERE
    assert(0);
    return 0;
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit, uint64_t current_core_cycle, int fill_level, uint8_t valid)
{
    string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);
    
    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS";
    
    if ((type == WRITEBACK) && ip)
        assert(0);
        
    // uncomment this line to see the LLC accesses
    // cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " << setw(5) << set << " way: " << setw(2) << way;
    // cout << hex << " paddr: " << setw(12) << paddr << " ip: " << setw(8) << ip << " victim_addr: " << victim_addr << dec << endl;
    
    int D22 = 0;
    
    if (hit)
    {
        if (type == WRITEBACK) 
        {
            rrpvhits[rrpv[set][way]]++;
            // Handle writebacks like original DRRIP implementation in champsim
            if (D22)
            {
                rrpv[set][way] = maxRRPV-1;
            }
            return;
        }
        
        int reuseMode = 5;
        int reuseFlag = 0;
        
        // Learn only on insRRPV = 2 phase  (for usePredictor mode = 1)      
        if ((usePredictor == 1) && (insRRPV != maxRRPV))
        {
            // Only on second hit
            if ((reuseMode == 3) && reuse[set][way])
            {
                reuseFlag = 1;
            }        
            // Set always on at least one hit
            else if ((reuseMode == 4) && !reuse[set][way])
            {
                reuseFlag = 1;            
            }
            // Only on hit on SRRIP 0 state (good locality)
            else if ((reuseMode == 5) && (rrpv[set][way] == 0))
            {
                reuseFlag = 1;            
            }

            if (reuseFlag)
            {
                // Update predictor
                int predSet = (full_addr >> LOG2_BLOCK_SIZE) & ((1 << predictorIndexSize) - 1);
                predictorArray[predSet] = 1;
            }
        }
        // Pedictor mode 3 learn only on hits where we have the IP
        else if ((usePredictor == 3) && ip)
        {   
            int predSet = ip & ((1 << predictorIndexSize) - 1);
            
            if (predictorArray[predSet] == 0)
            {
                predictorArray[predSet] = insRRPV;
            }
            // If prediction equal to insRRPV then do nothing
            else if (predictorArray[predSet] == insRRPV)
            {
            }
            // If not zero and not the same as before it means it hit on both values so set predictor to maxRRPV+1
            else
            {
                predictorArray[predSet] =  maxRRPV+1;                            
            }
        }
            
        
        rrpvhits[(rrpv[set][way])+(reuse[set][way]*(maxRRPV+1))]++;
        reuse[set][way] = 1;
        rrpvcounters[rrpv[set][way]]++;
        rrpvcountersPerSet[set][rrpv[set][way]]++;
        rrpv[set][way] = 0;
    }
    else
    {
        // Handle writebacks like original DRRIP implementation in champsim
        if (D22)
        {
            if ((type == WRITEBACK)) 
            {
                // demote on writebacks
                rrpv[set][way] = maxRRPV-1;
                return;
            }
        }
            
        if (replacePerSet)
        {
            rrpv[set][way] = insRRPVPerSet[set];
        }
        else
        {
            rrpv[set][way] = insRRPV;
        }

        // IF BIP enable on insRRPV = maxRRPR
        if (BIP_MAX)
        {
            //Always apply BIP (even if insRRPV = 2 will not affect
            bip_counter++;
            if (bip_counter == BIP_MAX)
                bip_counter = 0;
            if (bip_counter == 0)
                rrpv[set][way] = maxRRPV-1;
        }
        
        if (usePredictor)
        {
            if (0 && (usePredictor == 1))
            {
                // If we are inserting in maxRRPV and this has been predicted for reuse then save it in maxRRPV - 1
                if (insRRPV == maxRRPV)
                {
                    int predSet = (full_addr >> LOG2_BLOCK_SIZE) & ((1 << predictorIndexSize) - 1);
                    //if (predictorArray[predSet])
                    //{
                    //    cout << "Pred Hit: " << predictorArray[predSet] << " " << predSet  << " " << (full_addr >> LOG2_BLOCK_SIZE) << endl;
                    //}
                    rrpv[set][way] = maxRRPV - predictorArray[predSet];
                }
            }
            else if (0 && (usePredictor == 1))
            {
                int predSet = (full_addr >> LOG2_BLOCK_SIZE) & ((1 << predictorIndexSize) - 1);
                // If we are inserting in maxRRPV and this has been predicted for reuse then save it in maxRRPV - 1
                if (insRRPV != maxRRPV)
                {
                    rrpv[set][way] = maxRRPV - predictorArray[predSet];
                }
            }
            else if (0 && (usePredictor == 2))
            {
                int predSet = (full_addr >> LOG2_BLOCK_SIZE) & ((1 << predictorIndexSize) - 1);
                // If we are inserting in maxRRPV and this has been predicted for reuse then save it in insRRPV - 1
                if ((insRRPV == maxRRPV) && ((predictorArray[predSet] == insRRPV) || (predictorArray[predSet] > maxRRPV)))
                {
                    rrpv[set][way] = insRRPV - 1;
                }
            }
            else if (1 && (usePredictor == 3))
            {
                if (ip)
                {
                    int predSet = ip & ((1 << predictorIndexSize) - 1);
                    // If we are inserting in maxRRPV and this has been predicted for reuse then save it in insRRPV - 1
                    if ((insRRPV == maxRRPV) && ((predictorArray[predSet] == insRRPV) || (predictorArray[predSet] > maxRRPV)))
                    {
                        rrpv[set][way] = insRRPV - 1;
                    }
                }
            }
        }
        reuse[set][way] = 0;
    }
}

// use this function to print out your own stats at the end of simulation
void CACHE::llc_replacement_final_stats()
{
    for (int i=0; i<((maxRRPV+1)*2); i++) 
    {
        cout << "SRRIP Region " << i << ": Hits " << rrpvhits[i] << " Replacements " << rrpvrepl[i] << endl;
    }
    
    cout << "SRRIP Switch Region 2: " << rrpvperiods[0] << endl;
    cout << "SRRIP Switch Region 3: " << rrpvperiods[1] << endl;
    cout << "SRRIP Switch Region 2-2: " << rrpvperiods[2] << endl;
    cout << "SRRIP Switch Region 2-3: " << rrpvperiods[3] << endl;
    cout << "SRRIP Switch Region 3-2: " << rrpvperiods[4] << endl;
    cout << "SRRIP Switch Region 3-3: " << rrpvperiods[5] << endl;
    cout << "SRRIP Switch Region 2-3-2: " << rrpvperiods[6] << endl;
    cout << "SRRIP Switch Region 3-3-2: " << rrpvperiods[7] << endl;
    
    for (std::pair<std::string, unsigned int> element : RRPVDistr)
    {
        std::cout << "SRRIP Distribution: "<< element.first << " :: " << element.second << std::endl;
    }
}
