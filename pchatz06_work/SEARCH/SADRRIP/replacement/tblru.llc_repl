#include <unordered_map>
#include <string>
#include <vector>
#include <algorithm>
#include <sstream>
#include <iterator>
#include "cache.h"

std::unordered_map<unsigned int, unsigned int> timeMissDiffHash;
std::unordered_map<std::string, unsigned int> timeEvictDiffHash;
std::unordered_map<std::string, unsigned int> timeEvictResolutionHash;
std::unordered_map<unsigned int, unsigned int> timeHitDiffHash;
int testLine;
int measureHits;
int measureEvictions;
int measureEvictionsLong;

void reset(int n_sets, int n_ways) 
{
}

// initialize replacement state
void CACHE::llc_initialize_replacement()
{
    testLine = -1;
    measureHits = 0;
    measureEvictions = 0;
    measureEvictionsLong = 1;
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type, uint64_t current_core_cycle, uint64_t instr_unique_id)
{
    // baseline LRU
    uint32_t way = 0;
    uint32_t oldestWay = 0;
    uint32_t oldestValue = 0;

    // fill invalid line first
    for (way=0; way<NUM_WAY; way++) {
        if (block[set][way].valid == false) {

            DP ( if (warmup_complete[cpu]) {
            cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " invalid set: " << set << " way: " << way;
            cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
            cout << dec << " lru: " << block[set][way].lru << endl; });

            break;
        }
    }

    // LRU victim
    if (way == NUM_WAY) 
    {
        for (way=0; way<NUM_WAY; way++) 
        {
            if (way == 0)
            {
                oldestValue = block[set][way].lru;
                oldestWay = way;
            }
            else
            {
                if (oldestValue > block[set][way].lru)
                {
                    if ((testLine >= 0) && (set == testLine))
                    {
                        cout << "Previous old: " << oldestWay << " with cycle " << oldestValue << endl;
                    }

                    oldestValue = block[set][way].lru;
                    oldestWay = way;

                    if ((testLine >= 0) && (set == testLine))
                    {
                        cout << "New old: " << oldestWay << " with cycle " << oldestValue << endl;
                    }
                }                
            }
        }

        if ((testLine >= 0) && (set == testLine))
        {
            cout << "Replacing valid way: " << oldestWay << " with tag " << block[set][oldestWay].tag << endl;
        }
        
        if (measureEvictions)
        {
            for (way=0; way<NUM_WAY; way++) 
            {
                if (way != oldestWay)
                {
                    uint64_t timeDiff = block[set][way].lru - oldestValue;
                    
                    auto search = timeMissDiffHash.find(timeDiff);
                    if (search != timeMissDiffHash.end()) {
                        timeMissDiffHash[timeDiff]++;
                    } 
                    else 
                    {
                        timeMissDiffHash.insert( { timeDiff, 1 });
                    }
                }
            }
        }
        else if (measureEvictionsLong)
        {
            uint64_t myDiffs[NUM_WAY] = {};
            uint64_t myResolution[NUM_WAY] = {};

            for (way=0; way<NUM_WAY; way++) 
            {
                uint64_t timeDiff = current_core_cycle - block[set][way].lru;
                myDiffs[way] = timeDiff;
                timeDiff = block[set][way].lru - oldestValue;
                myResolution[way] = timeDiff;
            }

            std::vector<uint64_t> myDiffvector (myDiffs, myDiffs+NUM_WAY);
            std::sort (myDiffvector.begin(), myDiffvector.end());
            
            std::ostringstream diffStringStream;

            if (!myDiffvector.empty())
            {
                // Convert all but the last element to avoid a trailing ","
                std::copy(myDiffvector.begin(), myDiffvector.end()-1,
                    std::ostream_iterator<uint64_t>(diffStringStream, ","));

                // Now add the last element with no delimiter
                diffStringStream << myDiffvector.back();
            }
            
            std::string diffString = diffStringStream.str();
            
            auto search = timeEvictDiffHash.find(diffString);
            if (search != timeEvictDiffHash.end()) {
                timeEvictDiffHash[diffString]++;
            } 
            else 
            {
                timeEvictDiffHash.insert( { diffString, 1 });
            }
            

            std::vector<uint64_t> myResvector (myResolution, myResolution+NUM_WAY);
            std::sort (myResvector.begin(), myResvector.end());
            
            std::ostringstream resStringStream;

            if (!myResvector.empty())
            {
                // Convert all but the last element to avoid a trailing ","
                std::copy(myResvector.begin(), myResvector.end()-1,
                    std::ostream_iterator<uint64_t>(resStringStream, ","));

                // Now add the last element with no delimiter
                resStringStream << myResvector.back();
            }
            
            std::string resString = resStringStream.str();
            
            auto search2 = timeEvictResolutionHash.find(resString);
            if (search2 != timeEvictResolutionHash.end()) {
                timeEvictResolutionHash[resString]++;
            } 
            else 
            {
                timeEvictResolutionHash.insert( { resString, 1 });
            }

        }
            
        
        return oldestWay;
    }
    else
    {
        if ((testLine >= 0) && (set == testLine))
        {
            cout << "Replacing invalid way: " << way << " with tag " << block[set][way].tag << endl;
        }

        return way;
    }
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit, uint64_t current_core_cycle, int fill_level, uint8_t valid)
{
    string TYPE_NAME;
    int hitToMeasure = 0;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
    {
        TYPE_NAME += "_HIT";
        hitToMeasure = 1;
    }
    else
    {
        TYPE_NAME += "_MISS";
    }
    
    if ((type == WRITEBACK) && ip)
        assert(0);

    // uncomment this line to see the LLC accesses
    // cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " << setw(5) << set << " way: " << setw(2) << way;
    // cout << hex << " paddr: " << setw(12) << paddr << " ip: " << setw(8) << ip << " victim_addr: " << victim_addr << dec << endl;

    // baseline LRU
    if (hit && (type == WRITEBACK)) // writeback hit does not update LRU state
        return;

    uint64_t timeDiff = current_core_cycle - block[set][way].lru;

    if ((testLine >= 0) && (set == testLine))
    {
        cout << "Hit: " << hitToMeasure << "Old Cycle: " << block[set][way].lru << " Hit on way: " << way << " with tag " << block[set][way].tag << endl;
    }

    block[set][way].lru = current_core_cycle;

    if ((testLine >= 0) && (set == testLine))
    {
        cout << "Hit: " << hitToMeasure << "New Cycle: " << block[set][way].lru << " with difference: " << timeDiff << endl;
    }
    
    if (hitToMeasure && measureHits)
    {
        auto search = timeHitDiffHash.find(timeDiff);
        if (search != timeHitDiffHash.end()) {
            timeHitDiffHash[timeDiff]++;
        } 
        else 
        {
            timeHitDiffHash.insert( { timeDiff, 1 });
        }
    }

    return;
}

void CACHE::llc_replacement_final_stats()
{
    for (std::pair<unsigned int, unsigned int> element : timeMissDiffHash)
    {
		std::cout << "EvictionDistance: "<< element.first << " :: " << element.second << std::endl;
    }

    for (std::pair<unsigned int, unsigned int> element : timeHitDiffHash)
    {
		std::cout << "HitDistance: "<< element.first << " :: " << element.second << std::endl;
    }

    for (std::pair<std::string, unsigned int> element : timeEvictDiffHash)
    {
		std::cout << "EvictionLongDistance: "<< element.first << " :: " << element.second << std::endl;
    }

    for (std::pair<std::string, unsigned int> element : timeEvictResolutionHash)
    {
		std::cout << "EvictionResDistance: "<< element.first << " :: " << element.second << std::endl;
    }

}
