#include "cache.h"

#define maxRRPV 3
uint32_t rrpv[LLC_SET][LLC_WAY];
uint32_t rrpvhits[maxRRPV+1];
uint32_t rrpvrepl[maxRRPV+1];
uint32_t rrpvweights[maxRRPV+1];

uint32_t testLine;

// initialize replacement state
void CACHE::llc_initialize_replacement()
{
    cout << "Initialize SRRIP state" << endl;

    for (int i=0; i<LLC_SET; i++) {
        for (int j=0; j<LLC_WAY; j++) {
            rrpv[i][j] = maxRRPV;
        }
    }

    testLine = 0;

    for (int i=0; i<(maxRRPV+1); i++) {
        rrpvhits[i] = 0;
        rrpvrepl[i] = 0;
    }
    
    rrpvweights[0] = 1;
    rrpvweights[1] = 2;
    rrpvweights[2] = 4;
    rrpvweights[3] = 8;
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type, uint64_t current_core_cycle)
{
    int lowest=1, highest=0;
    
    for (int i=0; i<(maxRRPV+1); i++) 
    {
        highest+=rrpvweights[i];
    }
    
    int range=(highest-lowest)+1;
    
    uint32_t randomValue = (lowest + int(range * (rand() / (RAND_MAX + 1.0)))); 

    int accum = 0;
    int replaceRegion = 3;
    for (int i=0; i<(maxRRPV+1); i++)
    {
        accum+=rrpvweights[i];
        if (accum >= randomValue)
        {
            replaceRegion = i;
            break;
        }
    }

    if ((testLine >= 0) && (set == testLine))
    {
        cout << "Region selected " << replaceRegion << " with random value " << randomValue << endl;
    }

    if (replaceRegion < maxRRPV)
    {
        // Check if at least one in this region
        while (1)
        {
            int i = 0;
            int regionFound = 0;
            for (i=0; i<LLC_WAY; i++)
            {
                //cout << "AWay " << i << " value " << rrpv[set][i] << endl;
                if (rrpv[set][i] == replaceRegion)
                {
                    regionFound = 1;
                    break;
                }
            }

            if (regionFound)
                break;

            replaceRegion++;
            if (replaceRegion == maxRRPV)
            {
                break;
            }
        }
    }

    if ((testLine >= 0) && (set == testLine))
    {
        cout << "Final region " << replaceRegion << " with random value " << randomValue << endl;
    }

    // look for the maxRRPV line
    int countIncreases = 0;
    while (1)
    {
        for (int i=0; i<LLC_WAY; i++)
        {
            //cout << "Way " << i << " value " << rrpv[set][i] << endl;
            if (rrpv[set][i] == replaceRegion)
            {
                rrpvrepl[replaceRegion-countIncreases]++;
                return i;
            }
        }
        
        // Count how many times we increased
        countIncreases++;
        
        for (int i=0; i<LLC_WAY; i++)
        {
            if (rrpv[set][i] < maxRRPV)
                rrpv[set][i]++;
        }
    }

    // WE SHOULD NOT REACH HERE
    assert(0);
    return 0;
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit, uint64_t current_core_cycle, int fill_level, uint8_t valid)
{
    string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS";

    if ((type == WRITEBACK) && ip)
        assert(0);

    // uncomment this line to see the LLC accesses
    // cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " << setw(5) << set << " way: " << setw(2) << way;
    // cout << hex << " paddr: " << setw(12) << paddr << " ip: " << setw(8) << ip << " victim_addr: " << victim_addr << dec << endl;
    
    if (hit)
    {
        rrpvhits[rrpv[set][way]]++;
        rrpv[set][way] = 0;
    }
    else
        rrpv[set][way] = maxRRPV-1;
}

// use this function to print out your own stats at the end of simulation
void CACHE::llc_replacement_final_stats()
{
    for (int i=0; i<(maxRRPV+1); i++) 
    {
        cout << "SRRIP Region " << i << ": Hits " << rrpvhits[i] << " Replacements " << rrpvrepl[i] << endl;
    }
}
