#include "ooo_cpu.h"
#include "cache.h"

// policy defined in terms of types and what to do in case of hit/miss
//
// miss 0, hit 1 x LOAD, RFO, PREFETCH, WRITEBACK
#define CASES 2
uint32_t rrip_policy[NUM_TYPES][CASES];
//
// options: 0,1,2,3 RRIP states for where to insert, 4 means do nothing and 5,6,7 means 1,2,3 but 1/32 0,1,2

// BRRIP bip_counter
uint32_t bip_counter= 0;
#define EPSI 32

// demote policy 0 is no change
#define DEM_P1 16 // demote policy 1 (minimal)
#define DEM_P2 32 // demote policy 2 (almost maximal - except all 0)
#define DEM_P3 64 // demote policy 3 (maximal)
#define DEM_P4 128// 1.5

void update_state(uint32_t &s, uint32_t type, uint8_t hit){
  switch(rrip_policy[type][hit]){
  case 0:
  case 1:
  case 2:
  case 3:
    s = rrip_policy[type][hit];
    break;
  case 4:
    // do nothing
    break;
  case 5:
  case 6:
  case 7:
    bip_counter++;
    if (bip_counter == EPSI){
      s = rrip_policy[type][hit] - 5;
      bip_counter = 0;
    }
    else
      s = rrip_policy[type][hit] - 4;
    break;
  default:
    abort();
  }
}

#define maxRRPV 3
uint32_t rrpv[LLC_SET][LLC_WAY];

// initialize replacement state
void CACHE::llc_initialize_replacement()
{
    cout << "Initialize SRRIP state" << endl;

    for (int i=0; i<LLC_SET; i++) {
        for (int j=0; j<LLC_WAY; j++) {
            rrpv[i][j] = maxRRPV;
        }
    }

    uint64_t t= rrip_policies;
    for(int i=0;i<NUM_TYPES;++i)
      for(int j=0;j<CASES;++j){
	rrip_policy[i][j] = t%10;
	t = t/10;
      }
    cout<< "RRIP-POLICY: ";
    for(int i=NUM_TYPES-1;i>=0;--i)
      for(int j=CASES-1;j>=0;--j)
	cout <<rrip_policy[i][j] << "-";
    cout<<	endl;

}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type, uint64_t current_core_cycle, uint64_t instr_unique_id)
{
  uint32_t trrpv[LLC_WAY];

  unsigned int max = rrpv[set][0];
  for (int i=0; i<LLC_WAY; i++) {trrpv[i]=rrpv[set][i]; if (max<rrpv[set][i]) max=rrpv[set][i];}

    // look for the maxRRPV line
    while (1)
    {
        for (int i=0; i<LLC_WAY; i++)
	  if (rrpv[set][i] == maxRRPV){
	    if ((demote_mask & (1<< type))==0){
	        for (int i=0; i<LLC_WAY; i++) rrpv[set][i]=trrpv[i];
		if (demote_mask & DEM_P1){
		  if (max == 1) for (int i=0; i<LLC_WAY; i++) ++rrpv[set][i];
		}
		else if (demote_mask & DEM_P2){
		  if (max<=2) for (int i=0; i<LLC_WAY; i++) if (rrpv[set][i]<2) ++rrpv[set][i];
		}
		else if (demote_mask & DEM_P3){
		  if (max==0) {
		    for (int i=0; i<LLC_WAY; i++) rrpv[set][i]=2;
		  }  
		  else if (max<=2) for (int i=0; i<LLC_WAY; i++) if (rrpv[set][i]<2) ++rrpv[set][i];
		}
		else if (demote_mask & DEM_P4){
		  if (max==0)for (int i=0; i<LLC_WAY; i++) rrpv[set][i]=2;
		  else if (max == 1) for (int i=0; i<LLC_WAY; i++) ++rrpv[set][i]; 
		}
	    }
	    return i;
	  }

        for (int i=0; i<LLC_WAY; i++)
            rrpv[set][i]++;
    }

    // WE SHOULD NOT REACH HERE
    assert(0);
    return 0;
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit, uint64_t current_core_cycle, int fill_level)
{
    string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS";

    if ((type == WRITEBACK) && ip)
        assert(0);

    if ((track_set == LLC_SET || track_set == set)){
      // uncomment this line to see the LLC accesses
      cout << "CPU: " << cpu << "  LLC " << setw(9) << type << " " << ((int) hit) << " set: " << setw(5) << set << " way: " << setw(2) << way;
      cout << hex << " paddr: " << setw(12) << (full_addr >> LOG2_BLOCK_SIZE) << " ip: " << setw(8) << ip << " victim_addr: " << victim_addr << dec << " cycle: " << current_core_cycle;
      cout << " icount: " << ooo_cpu[cpu].num_retired << endl;
    }    

    update_state(rrpv[set][way],type,hit);

    /*    if (hit)
        rrpv[set][way] = 0;
    else
        rrpv[set][way] = maxRRPV-1;
    */
}

// use this function to print out your own stats at the end of simulation
void CACHE::llc_replacement_final_stats()
{

}
